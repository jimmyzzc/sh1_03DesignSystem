<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ShSoft.Library.Infrastr</name>
    </assembly>
    <members>
        <member name="T:ShSoft.Library.Infrastr.Attributes.DbMapperAttribute">
            <summary>
            数据库映射器（用于数据库与域模型间映射）。
            </summary>
        </member>
        <member name="T:ShSoft.Library.Infrastr.Attributes.IEntityMapper">
            <summary>
            模型映射器（配合IPropertyMapper使用）。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Attributes.IEntityMapper.Name">
            <summary>
            获取映射器名称 <seealso cref="T:System.String"/>。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Attributes.IEntityMapper.MappingTableName">
            <summary>
            获取映射实体的类名（完整类名，包含类命名空间） <seealso cref="T:System.String"/>。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Attributes.IEntityMapper.MappingToEntityType">
            <summary>
            获取实体类型。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Attributes.IEntityMapper.Description">
            <summary>
            获取映射器描述。
            </summary>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Attributes.DbMapperAttribute.#ctor(System.String,System.String)">
            <summary>
            构造器。
            </summary>
            <param name="pMappingTableName"></param>
            <param name="pDescription"></param>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Attributes.DbMapperAttribute.Name">
            <summary>
            获取或设置该映射器的名称。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Attributes.DbMapperAttribute.MappingTableName">
            <summary>
            获取该映射器所对应的表名。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Attributes.DbMapperAttribute.MappingToEntityType">
            <summary>
            获取该映射器对应的实体类型。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Attributes.DbMapperAttribute.Description">
            <summary>
            获取或设置该映射器描述。
            </summary>
        </member>
        <member name="T:ShSoft.Library.Infrastr.Attributes.EntityMapperAttribute">
            <summary>
            实体映射器（DTOModel与DModel的关系映射）。
            </summary>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Attributes.EntityMapperAttribute.#ctor(System.String,ShSoft.Library.Infrastr.Enums.EntityTypeEnum)">
            <summary>
            构造器。
            </summary>
            <param name="pMappingName">映射实体的类名（完整类名，包含类命名空间） <seealso cref="T:System.String"/>。</param>
            <param name="pEntityType">映射的实体类型 <seealso cref="T:ShSoft.Library.Infrastr.Enums.EntityTypeEnum"/>。</param>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Attributes.EntityMapperAttribute.#ctor(System.String,System.String,ShSoft.Library.Infrastr.Enums.EntityTypeEnum)">
            <summary>
            构造器。
            </summary>
            <param name="pName">映射器名称 <seealso cref="T:System.String"/>。</param>
            <param name="pMappingName">映射的映射器名称 <seealso cref="T:System.String"/>。</param>
            <param name="pEntityType">映射的实体类型 <seealso cref="T:ShSoft.Library.Infrastr.Enums.EntityTypeEnum"/>。</param>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Attributes.EntityMapperAttribute.Name">
            <summary>
            获取映射器名称 <seealso cref="T:System.String"/>。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Attributes.EntityMapperAttribute.MappingTableName">
            <summary>
            获取映射实体的类名（完整类名，包含类命名空间） <seealso cref="T:System.String"/>。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Attributes.EntityMapperAttribute.MappingToEntityType">
            <summary>
            映射到实体类型（目标实体类型）。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Attributes.EntityMapperAttribute.Description">
            <summary>
            获取映射器描述 <seealso cref="T:System.String"/>。
            </summary>
        </member>
        <member name="T:ShSoft.Library.Infrastr.Attributes.IPropertyMapper">
            <summary>
            属性映射器（配合IModelMapper使用）。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Attributes.IPropertyMapper.MapperName">
            <summary>
            获取对应的映射器名称（唯一映射器时可选填）。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Attributes.IPropertyMapper.Name">
            <summary>
            获取属性名称。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Attributes.IPropertyMapper.MappingName">
            <summary>
            获取映射属性名称。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Attributes.IPropertyMapper.Description">
            <summary>
            获取映射器描述。
            </summary>
        </member>
        <member name="T:ShSoft.Library.Infrastr.Attributes.PropertyMapperAttribute">
            <summary>
            属性映射器，用于对应模型间属性。
            </summary>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Attributes.PropertyMapperAttribute.#ctor(System.String,System.String)">
            <summary>
            构造器。
            </summary>
            <param name="pMappingName">映射目标实体的属性名称 <seealso cref="T:System.String"/>。</param>
            <param name="pDescription">属性映射器描述 <seealso cref="T:System.String"/>。</param>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Attributes.PropertyMapperAttribute.MapperName">
            <summary>
            获取或设置映射器名称。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Attributes.PropertyMapperAttribute.Name">
            <summary>
            获取或设置当前属性名称。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Attributes.PropertyMapperAttribute.MappingName">
            <summary>
            获取映射至目标的属性名。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Attributes.PropertyMapperAttribute.Description">
            <summary>
            获取或设置映射器描述。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Attributes.PropertyMapperAttribute.IsSubType">
            <summary>
            获取或设置该属性是否是子类型。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Attributes.PropertyMapperAttribute.IsCollectionType">
            <summary>
            获取或设置该属性是否是集合类型。
            </summary>
        </member>
        <member name="T:ShSoft.Library.Infrastr.Attributes.PropertyValidatorAttribute">
            <summary>
            属性验证器。
            </summary>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Attributes.PropertyValidatorAttribute.#ctor">
            <summary>
            构造器。
            </summary>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Attributes.PropertyValidatorAttribute.#ctor(System.String,System.Int32)">
            <summary>
            构造器。
            </summary>
            <param name="pType"></param>
            <param name="pMazLength"></param>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Attributes.PropertyValidatorAttribute.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            构造器。
            </summary>
            <param name="pType"></param>
            <param name="pMinLength"></param>
            <param name="pMaxLength"></param>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Attributes.PropertyValidatorAttribute.#ctor(ShSoft.Library.Infrastr.Enums.PropertyFormatEnum,System.Int32,System.Int32)">
            <summary>
            构造器。
            </summary>
            <param name="pFormat"></param>
            <param name="pMinLength"></param>
            <param name="pMaxLength"></param>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Attributes.PropertyValidatorAttribute.Type">
            <summary>
            属性内容类型。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Attributes.PropertyValidatorAttribute.MinLength">
            <summary>
            最小长度，0为不限制。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Attributes.PropertyValidatorAttribute.MaxLength">
            <summary>
            最大长度，0为默认最大长度。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Attributes.PropertyValidatorAttribute.MinValue">
            <summary>
            最小值，0为不限制。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Attributes.PropertyValidatorAttribute.MaxValue">
            <summary>
            最大值，0为类型最大值。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Attributes.PropertyValidatorAttribute.Digit">
            <summary>
            保留小数位数。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Attributes.PropertyValidatorAttribute.Format">
            <summary>
            获取或设置格式类型。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Attributes.PropertyValidatorAttribute.FormatPattern">
            <summary>
            获取格式正则表达式。
            </summary>
        </member>
        <member name="T:ShSoft.Library.Infrastr.Config.ConfigManager">
            <summary>
            配置管理器。
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Config.ConfigManager._Timer">
            <summary>
            定时器，用于延时刷新配置信息。
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Config.ConfigManager._IsRefreshForLock">
            <summary>
            是否正在刷新（为线程锁定对象）。
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Config.ConfigManager.ConfigRootPathList">
            <summary>
            配置根路径。
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Config.ConfigManager.LibraryRootPathList">
            <summary>
            库（dll）根路径（bin 目录路径）。
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Config.ConfigManager.LogPath">
            <summary>
            日志文件根目录。
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Config.ConfigManager.ModulesConfigFileName">
            <summary>
            模块配置文件名称。
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Config.ConfigManager.RepositoriesConfigFileName">
            <summary>
            仓储配置文件名称。
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Config.ConfigManager.ModulesConfigFilePathList">
            <summary>
            模块配置文件路径列表。
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Config.ConfigManager.RepositoriesConfigFilePathList">
            <summary>
            仓储配置文件路径列表。
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Config.ConfigManager.ConfigExtendNames">
            <summary>
            配置文件扩展名。
            </summary>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Config.ConfigManager.#cctor">
            <summary>
            静态构造函数。
            </summary>
            <remarks>初始化配置文件路径。</remarks>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Config.ConfigManager.Refresh">
            <summary>
            刷新配置内容。
            </summary>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Config.ConfigManager.GetConfigPath(System.String)">
            <summary>
            获取可用配置文件路径。
            </summary>
            <param name="pFileName">文件名称。</param>
            <returns></returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Config.ConfigManager.GetLibraryPath(System.String)">
            <summary>
            获取可用类库文件路径。
            </summary>
            <param name="pFileName">文件名称。</param>
            <returns></returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Config.ConfigManager.parseModulesConfig(System.String)">
            <summary>
            解析模块配置。
            </summary>
            <param name="modulesConfigFilePath">模块配置文件路径。</param>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Config.ConfigManager.parseModulesConfig(System.String,System.Collections.Generic.Dictionary{System.String,ShSoft.Library.Infrastr.Models.ServiceInvokeInfo}@)">
            <summary>
            解析模块配置。
            </summary>
            <param name="modulesConfigFilePath">模块配置文件路径。</param>
            <param name="pServiceInvokeCollection">服务调用集合。</param>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Config.ConfigManager.parseRepositoriesConfig(System.String)">
            <summary>
            解析仓储配置。
            </summary>
            <param name="repositoriesConfigFilePath">仓储配置文件路径。</param>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Config.ConfigManager.parseDatabaseConfig(System.String,System.Xml.XmlDocument,System.Collections.Generic.Dictionary{System.String,ShSoft.Library.Infrastr.Models.DbConfigInfo}@)">
            <summary>
            解析数据库配置。
            </summary>
            <param name="pFilePath">仓储配置文件路径。</param>
            <param name="pXmlDocument">Xml 文档。</param>
            <param name="pDatabaseConfigCollection">数据库配置集合。</param>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Config.ConfigManager.parseRepositoryConfig(System.String,System.Xml.XmlDocument,System.Collections.Generic.Dictionary{System.String,ShSoft.Library.Infrastr.Models.RepositoryConfigInfo}@)">
            <summary>
            解析仓储配置。
            </summary>
            <param name="pFilePath">仓储配置文件路径。</param>
            <param name="pXmlDocument">Xml 文档。</param>
            <param name="pRepositoryConfigCollection">仓储配置集合。</param>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Config.ConfigManager.parseRepositoriesConfig(System.String,System.Collections.Generic.Dictionary{System.String,ShSoft.Library.Infrastr.Models.DbConfigInfo}@,System.Collections.Generic.Dictionary{System.String,ShSoft.Library.Infrastr.Models.RepositoryConfigInfo}@)">
            <summary>
            解析仓储配置。
            </summary>
            <param name="repositoriesConfigFilePath">仓储配置文件路径。</param>
            <param name="pDatabaseConfigCollection">数据库配置集合。</param>
            <param name="pRepositoryConfigCollection">仓储配置集合。</param>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Config.ConfigManager.refreshWithTimer">
            <summary>
            带定时器的刷新。
            </summary>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Config.ConfigManager.timer_Elapsed(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            定时器已达到间隔时间事件。
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Config.ConfigManager.fileWatchHelper_Changed(System.Object,System.IO.FileSystemEventArgs)">
            <summary>
            文件改变事件。
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Config.ConfigManager.fileWatchHelper_Renamed(System.Object,System.IO.RenamedEventArgs)">
            <summary>
            文件更名事件。
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Config.ConfigManager.LoadModuleConfig(System.String)">
            <summary>
            加载模块配置信息。
            </summary>
            <param name="pFilePath">服务调用配置文件路径。</param>
            <returns></returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Config.ConfigManager.LoadDatabaseConfig(System.String)">
            <summary>
            加载数据库配置信息。
            </summary>
            <param name="pFilePath">仓储配置文件路径。</param>
            <returns></returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Config.ConfigManager.LoadRepositoryConfig(System.String)">
            <summary>
            加载仓储配置信息。
            </summary>
            <param name="pFilePath">仓储配置文件路径。</param>
            <returns></returns>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Config.ConfigManager.ModuleConfigCollection">
            <summary>
            模块配置信息集合。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Config.ConfigManager.DatabaseConfigCollection">
            <summary>
            数据库配置信息集合。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Config.ConfigManager.RepositoryConfigCollection">
            <summary>
            仓库配置信息集合。
            </summary>
        </member>
        <member name="T:ShSoft.Library.Infrastr.Data.DataConverter">
            <summary>
            数据转换器。
            </summary>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Data.DataConverter.Convert``2(System.Object,``0)">
            <summary>
            从 DModel （域模型） 或 其他模型 转换为 DTOModel （数据传输对象）。
            </summary>
            <typeparam name="TTarget"></typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="pSource"></param>
            <param name="pTarget"></param>
            <returns></returns>
            <remarks>支持子实体列表转换（IList&lt;BaseDModel&gt;至IList&lt;BaseDTOModel&gt;的转换）。</remarks>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Data.DataConverter.Convert``2(ShSoft.Library.Infrastr.Models.Interfaces.IDTOModel{``1},``0)">
            <summary>
            从 DTOModel （数据传输对象）转换为 DModel （域模型） 或 其他模型。
            </summary>
            <typeparam name="TTarget"></typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="pSource"></param>
            <param name="pTarget"></param>
            <returns></returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Data.DataConverter.Convert``2(System.Object[],System.Collections.Generic.List{``0})">
            <summary>
            从 DModel 列表（域模型列表） 或 其他模型列表 转换为 DTOModel 列表（数据传输对象列表）。
            </summary>
            <typeparam name="TTarget"></typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="pSources"></param>
            <param name="pTarget"></param>
            <returns></returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Data.DataConverter.Convert``2(ShSoft.Library.Infrastr.Models.Interfaces.IDTOModel{``1}[],System.Collections.Generic.List{``0})">
            <summary>
            从 DTOModel 列表（数据传输对象列表）转换为 DModel 列表（域模型列表） 或 其他模型列表。
            </summary>
            <typeparam name="TTarget"></typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="pSources"></param>
            <param name="pTarget"></param>
            <returns></returns>
        </member>
        <member name="T:ShSoft.Library.Infrastr.Data.TypeConverter">
            <summary>
            类型转换辅助类。
            </summary>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Data.TypeConverter.Convert(System.Object,System.Type,System.Type)">
            <summary>
            将对象或值“pValue”从“pFromType”类型转换到“pToType”类型。
            </summary>
            <param name="pValue">值。</param>
            <param name="pToType">目标类型。</param>
            <param name="pFromType">源类型。</param>
            <returns></returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Data.TypeConverter.CanConvert(System.Type,System.Type)">
            <summary>
            判断是否能从“pFromType”类型转换到“pToType”类型。
            </summary>
            <param name="pFromType">源类型。</param>
            <param name="pToType">目标类型。</param>
            <returns></returns>
        </member>
        <member name="T:ShSoft.Library.Infrastr.Enums.AccessPurviewFlags">
            <summary>
            访问权限枚举。
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Enums.AccessPurviewFlags.Allow">
            <summary>
            允许。
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Enums.AccessPurviewFlags.Refuse">
            <summary>
            拒绝。
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Enums.AccessPurviewFlags.Govern">
            <summary>
            支配（可将该权限分配给其他人）。
            </summary>
        </member>
        <member name="T:ShSoft.Library.Infrastr.Enums.AccessTypeEnum">
            <summary>
            数据库访问类型枚举（读、写、读写）。
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Enums.AccessTypeEnum.Read">
            <summary>
            仅读。
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Enums.AccessTypeEnum.Write">
            <summary>
            仅写。
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Enums.AccessTypeEnum.ReadWrite">
            <summary>
            读写。
            </summary>
        </member>
        <member name="T:ShSoft.Library.Infrastr.CompositeStateEnum">
            <summary>
            执行状态，复合类型状态枚举。
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.CompositeStateEnum.None">
            <summary>
            尚未使用。
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.CompositeStateEnum.Success">
            <summary>
            执行成功。
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.CompositeStateEnum.Cancel">
            <summary>
            执行被用户取消。
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.CompositeStateEnum.Failure">
            <summary>
            业务数据原因导致执行失败。
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.CompositeStateEnum.Exception">
            <summary>
            执行中遇到异常。
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.CompositeStateEnum.NotLoggedIn">
            <summary>
            尚未登录（未获取到用户登录信息）。
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.CompositeStateEnum.NoPermission">
            <summary>
            无权限（登录用户无权访问模块或操作功能）。
            </summary>
        </member>
        <member name="T:ShSoft.Library.Infrastr.Enums.ConfigTypeEnum">
            <summary>
            配置类型枚举。
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Enums.ConfigTypeEnum.Database">
            <summary>
            数据库配置。
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Enums.ConfigTypeEnum.Repository">
            <summary>
            仓储配置。
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Enums.ConfigTypeEnum.Module">
            <summary>
            模块配置。
            </summary>
        </member>
        <member name="T:ShSoft.Library.Infrastr.Enums.DatabaseSoftEnum">
            <summary>
            数据库软件枚举。
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Enums.DatabaseSoftEnum.MSSQLServer">
            <summary>
            Microsoft SQL Server。
            </summary>
            <remarks>
            
            </remarks>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Enums.DatabaseSoftEnum.MySQL">
            <summary>
            Oracle MySQL。
            </summary>
            <remarks>
            最流行的RDBMS。
            优点：
            •容易使用:
            安装MySQL非常容易。第三方库，包括可视化（也就是有GUI）的库让上手使用数据库非常简单。
            •功能丰富:
            MySQL 支持大部分关系型数据库应该有的 SQL 功能——有些直接支持，有些间接支持。
            •安全:
            MYSQL 有很多安全特性，其中有些相当高级。
            •灵活而强大:
            MySQL 能处理很多数据，此外如有需要，它还能“适应”各种规模的数据。
            •快速:
            放弃支持某些标准，让 MySQL 效率更高并能使用捷径，因此带来速度的提升。
            缺点：
            •已知的局限:
            从设计之初，MySQL 就没打算做到全知全能，因此它有一些功能局限，无法满足某些顶尖水平应用的需求。
            •可靠性问题:
            MySQL 对于某些功能的实现方式(例如，引用，事务，数据审核等) 使得它比其他一些关系型数据库略少了一些可靠性。
            •开发停滞:
            尽管 MySQL 理论上仍是开源产品，也有人抱怨它诞生之后更新缓慢。然而，应该注意到有一些基于 MySQL 并完整集成的数据库（如 MariaDB），在标准的 MySQL 基础上带来了额外价值。
            何时使用：
            •分布式操作:
            当SQLite所提供的不能满足你的需要时，可以把MySQL包括进你的部署栈，就像任何一个独立的数据库服务器，它会带来大量的操作自由性和一些先进的功能。
            •高安全性:
            MySQL的安全功能，用一种简单的方式为数据访问（和使用）提供了可靠的保护。
            •Web网站 和 Web应用:
            绝大多数的网站（和Web应用程序）可以忽视约束性地简单工作在MySQL上。这种灵活的和可扩展的工具是易于使用和易于管理的——这被证明非常有助于长期运行。
            •定制解决方案:
            如果你工作在一个高度量身定制的解决方案上，MySQL能够很容易地尾随和执行你的规则，这要感谢其丰富的配置设置和操作模式。
            </remarks>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Enums.DatabaseSoftEnum.Oracle">
            <summary>
            Oracle Database。
            </summary>
            <remarks>
            
            </remarks>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Enums.DatabaseSoftEnum.Sybase">
            <summary>
            Sybase。
            </summary>
            <remarks>
            
            </remarks>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Enums.DatabaseSoftEnum.Db2">
            <summary>
            Db2。
            </summary>
            <remarks>
            
            </remarks>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Enums.DatabaseSoftEnum.SQLite">
            <summary>
            SQLite。
            </summary>
            <remarks>
            一个强大的嵌入式关系型数据库管理系统。
            优点：
            •基于文件:
            整个数据库都包含在磁盘上的一个文件中，因此它有很好的迁移性。
            •标准化:
            尽管它看起来像个“简化版”的数据库，SQLite 确实支持 SQL。它略去了一些功能(RIGHT OUTER JOIN 和 FOR EACH STATEMENT)，但是，又同时增加了一些其他功能。
            •对开发乃至测试都很棒:
            在绝大多数应用的开发阶段中，大部分人都非常需要解决方案能有并发的灵活性。SQLite 含有丰富功能基础，所能提供的超乎开发所需，并且简洁到只需一个文件和一个 C 链接库。
            缺点：
            •没有用户管理: 
            高级数据库都能支持用户系统，例如，能管理数据库连接对数据库和表的访问权限。但由于 SQLite 产生的目的和本身性质（没有多用户并发的高层设计），它没有这个功能。
            •缺乏额外优化性能的灵活性： 
            仍然是从设计之初，SQLite 就不支持使用各种技巧来进行额外的性能优化。这个库容易配置，容易使用。既然它并不复杂，理论上就无法让它比现在更快，其实现在它已经很快了。
            何时使用：
            •嵌入式应用:
            所有需要迁移性，不需要扩展的应用，例如，单用户的本地应用，移动应用和游戏。
            •代替磁盘访问:
            在很多情况下，需要频繁直接读/写磁盘文件的应用，都很适合转为使用 SQLite ，可以得益于 SQLite 使用 SQL 带来的功能性和简洁性。
            •测试:
            它能秒杀大部分专门针对应用业务逻辑（也就是应用的主要目的：能完成功能）的测试。
            
            </remarks>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Enums.DatabaseSoftEnum.MSAccess">
            <summary>
            Microsoft Office Access。
            </summary>
            <remarks>
            
            </remarks>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Enums.DatabaseSoftEnum.PostgreSQL">
            <summary>
            PostgreSQL
            </summary>
            <remarks>
            最先进SQL型开源objective-RDBMS。
            优点：
            •标准支持 SQL 的开源关系型数据库:
            PostgreSQL 是一个开源的，自由(free)的，同时非常强大的关系型数据管理系统。
            •强大的社区:
            PostgreSQL 背后有热忱而经验丰富的社区，可以通过知识库和问答网站获取支持，全天候免费。
            •强大的第三方支持:
            即使其本身功能十分强大，PostgreSQL 仍附带有许多强大的开源第三方工具来辅助系统的设计、管理和使用。
            •可扩展性:
            可以用预先存储的流程来程序性扩展 PostgreSQL ，一个高级的关系型数据库理应如此。
            •面向对象:
            PostgreSQL 不只是一个关系型数据库，还是一个面向对象数据库——支持嵌套，及一些其他功能。
            缺点：
            •性能:
            对于简单而繁重的读取操作, PostgreSQL 会小题大作而可能会出现比同行（如MySQL）更低的性能。
            •普及:
            根据该工具的性质，从普及度来说它还缺乏足够后台支撑，尽管有大量的部署——这可能会影响能够获得支持的容易程度。
            •托管:
            由于上述因素的影响，要让主机或服务提供商提出使用PostgreSQL实例是很难的。
            何时使用：
            •数据完整性:
            当可靠性和数据完整性是绝对必要而无需理由时，PostgreSQL是更好的选择。
            •复杂的自定义过程:
            如果你需要你的数据库执行自定义过程，可扩展的PostgreSQL是更好的选择。
            •整合:
            在将来，如果可能要把整个数据库系统迁移到另一个适当的解决方案（例如Oracle）中，PostgreSQL对于这种切换将是最兼容和易于操作的。
            •复杂的设计:
            相比其他的开源和自由的 RDBMS（关系数据库管理系统）实现来说，对于复杂的数据库设计，PostgreSQL提供了大部分的功能和可能性，同时并没放弃其他有价值的地方。
            </remarks>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Enums.DatabaseSoftEnum.MongoDb">
            <summary>
            MongoDb。
            </summary>
            <remarks>
            •所用语言：C++
            •特点：保留了SQL一些友好的特性（查询，索引）。
            •使用许可： AGPL（发起者： Apache）
            •协议： Custom, binary（BSON）
            •Master/slave复制（支持自动错误恢复，使用 sets 复制）
            •内建分片机制
            •支持 javascript表达式查询
            •可在服务器端执行任意的 javascript函数
            •update-in-place支持比CouchDB更好
            •在数据存储时采用内存到文件映射
            •对性能的关注超过对功能的要求
            •建议最好打开日志功能（参数 –journal）
            •在32位操作系统上，数据库大小限制在约2.5Gb
            •空数据库大约占 192Mb
            •采用 GridFS存储大数据或元数据（不是真正的文件系统）
            最佳应用场景：适用于需要动态查询支持；需要使用索引而不是 map/reduce功能；需要对大数据库有性能要求；需要使用 CouchDB但因为数据改变太频繁而占满内存的应用程序。
            例如：你本打算采用 MySQL或 PostgreSQL，但因为它们本身自带的预定义栏让你望而却步。
            </remarks>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Enums.DatabaseSoftEnum.CouchDB">
            <summary>
            CouchDB。
            </summary>
            <remarks>
            •所用语言： Erlang
            •特点：DB一致性，易于使用
            •使用许可： Apache
            •协议： HTTP/REST
            •双向数据复制，
            •持续进行或临时处理，
            •处理时带冲突检查，
            •因此，采用的是master-master复制（见编注2）
            •MVCC – 写操作不阻塞读操作
            •可保存文件之前的版本
            •Crash-only（可靠的）设计
            •需要不时地进行数据压缩
            •视图：嵌入式 映射/减少
            •格式化视图：列表显示
            •支持进行服务器端文档验证
            •支持认证
            •根据变化实时更新
            •支持附件处理
            •因此， CouchApps（独立的 js应用程序）
            •需要 jQuery程序库
            最佳应用场景：适用于数据变化较少，执行预定义查询，进行数据统计的应用程序。适用于需要提供数据版本支持的应用程序。
            例如： CRM、CMS系统。 master-master复制对于多站点部署是非常有用的。
            （编注2：master-master复制：是一种数据库同步方法，允许数据在一组计算机之间共享数据，并且可以通过小组中任意成员在组内进行数据更新。）
            </remarks>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Enums.DatabaseSoftEnum.Redis">
            <summary>
            Redis。
            </summary>
            <remarks>
            •所用语言：C/C++
            •特点：运行异常快
            •使用许可： BSD
            •协议：类 Telnet
            •有硬盘存储支持的内存数据库，
            •但自2.0版本以后可以将数据交换到硬盘（注意， 2.4以后版本不支持该特性！）
            •Master-slave复制（见编注3）
            •虽然采用简单数据或以键值索引的哈希表，但也支持复杂操作，例如 ZREVRANGEBYSCORE。
            •INCR co (适合计算极限值或统计数据）
            •支持 sets（同时也支持 union/diff/inter）
            •支持列表（同时也支持队列；阻塞式 pop操作）
            •支持哈希表（带有多个域的对象）
            •支持排序 sets（高得分表，适用于范围查询）
            •Redis支持事务
            •支持将数据设置成过期数据（类似快速缓冲区设计）
            •Pub/Sub允许用户实现消息机制
            最佳应用场景：适用于数据变化快且数据库大小可遇见（适合内存容量）的应用程序。
            例如：股票价格、数据分析、实时数据搜集、实时通讯。
            （编注3：Master-slave复制：如果同一时刻只有一台服务器处理所有的复制请求，这被称为 Master-slave复制，通常应用在需要提供高可用性的服务器集群。）
            </remarks>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Enums.DatabaseSoftEnum.Riak">
            <summary>
            Riak。
            </summary>
            <remarks>
            •所用语言：Erlang和C，以及一些Javascript
            •特点：具备容错能力
            •使用许可： Apache
            •协议： HTTP/REST或者 custom binary
            •可调节的分发及复制(N, R, W)
            •用 JavaScript or Erlang在操作前或操作后进行验证和安全支持。
            •使用JavaScript或Erlang进行 Map/reduce
            •连接及连接遍历：可作为图形数据库使用
            •索引：输入元数据进行搜索（1.0版本即将支持）
            •大数据对象支持（ Luwak）
            •提供“开源”和“企业”两个版本
            •全文本搜索，索引，通过 Riak搜索服务器查询（ beta版）
            •支持Masterless多站点复制及商业许可的 SNMP监控
            最佳应用场景：适用于想使用类似 Cassandra（类似Dynamo）数据库但无法处理 bloat及复杂性的情况。适用于你打算做多站点复制，但又需要对单个站点的扩展性，可用性及出错处理有要求的情况。
            例如：销售数据搜集，工厂控制系统；对宕机时间有严格要求；可以作为易于更新的 web服务器使用。
            </remarks>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Enums.DatabaseSoftEnum.Membase">
            <summary>
            Membase。
            </summary>
            <remarks>
            •所用语言： Erlang和C
            •特点：兼容 Memcache，但同时兼具持久化和支持集群
            •使用许可： Apache 2.0
            •协议：分布式缓存及扩展
            •非常快速（200k+/秒），通过键值索引数据
            •可持久化存储到硬盘
            •所有节点都是唯一的（ master-master复制）
            •在内存中同样支持类似分布式缓存的缓存单元
            •写数据时通过去除重复数据来减少 IO
            •提供非常好的集群管理 web界面
            •更新软件时软无需停止数据库服务
            •支持连接池和多路复用的连接代理
            最佳应用场景：适用于需要低延迟数据访问，高并发支持以及高可用性的应用程序
            例如：低延迟数据访问比如以广告为目标的应用，高并发的 web 应用比如网络游戏（例如 Zynga）
            </remarks>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Enums.DatabaseSoftEnum.Neo4j">
            <summary>
            Neo4j。
            </summary>
            <remarks>
            •所用语言： Java
            •特点：基于关系的图形数据库
            •使用许可： GPL，其中一些特性使用 AGPL/商业许可
            •协议： HTTP/REST（或嵌入在 Java中）
            •可独立使用或嵌入到 Java应用程序
            •图形的节点和边都可以带有元数据
            •很好的自带web管理功能
            •使用多种算法支持路径搜索
            •使用键值和关系进行索引
            •为读操作进行优化
            •支持事务（用 Java api）
            •使用 Gremlin图形遍历语言
            •支持 Groovy脚本
            •支持在线备份，高级监控及高可靠性支持使用 AGPL/商业许可
            最佳应用场景：适用于图形一类数据。这是 Neo4j与其他nosql数据库的最显著区别
            例如：社会关系，公共交通网络，地图及网络拓谱
            </remarks>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Enums.DatabaseSoftEnum.Cassandra">
            <summary>
            Cassandra。
            </summary>
            <remarks>
            •所用语言： Java
            •特点：对大型表格和 Dynamo支持得最好
            •使用许可： Apache
            •协议： Custom, binary (节约型)
            •可调节的分发及复制(N, R, W)
            •支持以某个范围的键值通过列查询
            •类似大表格的功能：列，某个特性的列集合
            •写操作比读操作更快
            •基于 Apache分布式平台尽可能地 Map/reduce
            •我承认对 Cassandra有偏见，一部分是因为它本身的臃肿和复杂性，也因为 Java的问题（配置，出现异常，等等）
            最佳应用场景：当使用写操作多过读操作（记录日志）如果每个系统组建都必须用 Java编写（没有人因为选用 Apache的软件被解雇）
            例如：银行业，金融业（虽然对于金融交易不是必须的，但这些产业对数据库的要求会比它们更大）写比读更快，所以一个自然的特性就是实时数据分析
            </remarks>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Enums.DatabaseSoftEnum.HBase">
            <summary>
            HBase。
            </summary>
            <remarks>
            （配合 ghshephard使用）
            •所用语言： Java
            •特点：支持数十亿行X上百万列
            •使用许可： Apache
            •协议：HTTP/REST （支持 Thrift，见编注4）
            •在 BigTable之后建模
            •采用分布式架构 Map/reduce
            •对实时查询进行优化
            •高性能 Thrift网关
            •通过在server端扫描及过滤实现对查询操作预判
            •支持 XML, Protobuf, 和binary的HTTP
            •Cascading, hive, and pig source and sink modules
            •基于 Jruby（ JIRB）的shell
            •对配置改变和较小的升级都会重新回滚
            •不会出现单点故障
            •堪比MySQL的随机访问性能
            最佳应用场景：适用于偏好BigTable:)并且需要对大数据进行随机、实时访问的场合。
            例如： Facebook消息数据库（更多通用的用例即将出现）
            </remarks>
        </member>
        <member name="T:ShSoft.Library.Infrastr.Enums.EntityTypeEnum">
            <summary>
            实体类型枚举。用于实体映射，将当前实体自动转换为目标实体，转换时以源实体的映射设置为主。
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Enums.EntityTypeEnum.DatabaseEntity">
            <summary>
            与数据库字段映射的实体类型。
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Enums.EntityTypeEnum.DomainEntity">
            <summary>
            与领域模型实体映射的实体类型。
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Enums.EntityTypeEnum.DTOEntity">
            <summary>
            与传输对象实体映射的实体类型。
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Enums.EntityTypeEnum.XmlEntity">
            <summary>
            与XML关联映射的实体类型。
            </summary>
        </member>
        <member name="T:ShSoft.Library.Infrastr.Enums.ErrorTypeEnum">
            <summary>
            错误类型枚举。
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Enums.ErrorTypeEnum.None">
            <summary>
            尚未使用。
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Enums.ErrorTypeEnum.Data">
            <summary>
            业务数据错误。
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Enums.ErrorTypeEnum.Logic">
            <summary>
            逻辑处理异常。
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Enums.ErrorTypeEnum.Unknow">
            <summary>
            未知异常。
            </summary>
        </member>
        <member name="T:ShSoft.Library.Infrastr.Enums.HashAlgorithmEnum">
            <summary>
            Hash 算法枚举。
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Enums.HashAlgorithmEnum.SHA0">
            <summary>
            SHA0 散列算法。
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Enums.HashAlgorithmEnum.MD4">
            <summary>
            MD4 散列算法。
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Enums.HashAlgorithmEnum.MD5">
            <summary>
            MD5 散列算法。
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Enums.HashAlgorithmEnum.SHA1">
            <summary>
            SHA1 散列算法。
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Enums.HashAlgorithmEnum.SHA128">
            <summary>
            SHA128 散列算法。
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Enums.HashAlgorithmEnum.SHA224">
            <summary>
            SHA224 散列算法。
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Enums.HashAlgorithmEnum.SHA256">
            <summary>
            SHA256 散列算法。
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Enums.HashAlgorithmEnum.SHA384">
            <summary>
            SHA384 散列算法。
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Enums.HashAlgorithmEnum.SHA512">
            <summary>
            SHA512 散列算法。
            </summary>
        </member>
        <member name="T:ShSoft.Library.Infrastr.Enums.SortDirectionEnum">
            <summary>
            排序方向枚举。
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Enums.SortDirectionEnum.Unordered">
            <summary>
            不排序。
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Enums.SortDirectionEnum.AscendingSort">
            <summary>
            升序排序。
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Enums.SortDirectionEnum.DescendingSort">
            <summary>
            降序排序。
            </summary>
        </member>
        <member name="T:ShSoft.Library.Infrastr.Enums.WcfBindingTypeEnum">
            <summary>
            WCF 服务绑定类型枚举（暂用于 WCF 服务绑定）。
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Enums.WcfBindingTypeEnum.BasicHttpBinding">
            <summary>
            BasicHttpBinding 类型的绑定。
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Enums.WcfBindingTypeEnum.BasicHttpContextBinding">
            <summary>
            BasicHttpContextBinding 类型的绑定。
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Enums.WcfBindingTypeEnum.WebHttpBinding">
            <summary>
            WebHttpBinding 类型的绑定。
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Enums.WcfBindingTypeEnum.WSHttpBinding">
            <summary>
            WSHttpBinding 类型的绑定。
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Enums.WcfBindingTypeEnum.WSDualHttpBinding">
            <summary>
            WSDualHttpBinding 类型的绑定。
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Enums.WcfBindingTypeEnum.WS2007HttpBinding">
            <summary>
            WS2007HttpBinding 类型的绑定。
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Enums.WcfBindingTypeEnum.WS2007FederationHttpBinding">
            <summary>
            WS2007FederationHttpBinding 类型的绑定。
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Enums.WcfBindingTypeEnum.WSFederationHttpBinding">
            <summary>
            WSFederationHttpBinding 类型的绑定。
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Enums.WcfBindingTypeEnum.NetHttpBinding">
            <summary>
            NetHttpBinding 类型的绑定。
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Enums.WcfBindingTypeEnum.BasicHttpsBinding">
            <summary>
            BasicHttpsBinding 类型的绑定。
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Enums.WcfBindingTypeEnum.NetHttpsBinding">
            <summary>
            NetHttpsBinding 类型的绑定。
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Enums.WcfBindingTypeEnum.NetTcpBinding">
            <summary>
            NetTcpBinding 类型的绑定。
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Enums.WcfBindingTypeEnum.NetPeerTcpBinding">
            <summary>
            NetPeerTcpBinding 类型的绑定。
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Enums.WcfBindingTypeEnum.NetNamedPipeBinding">
            <summary>
            NetNamedPipeBinding 类型的绑定。
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Enums.WcfBindingTypeEnum.NetMsmqBinding">
            <summary>
            NetMsmqBinding 类型的绑定。
            </summary>
        </member>
        <member name="T:ShSoft.Library.Infrastr.Enums.IntegratedSecurityEnum">
            <summary>
            身份验证方式。
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Enums.IntegratedSecurityEnum.SSPI">
            <summary>
            Microsoft 安全支持提供器接口。
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Enums.IntegratedSecurityEnum.True">
            <summary>
            Windows 集成身份验证，同 SSPI，在 Microsoft SQL Server 推荐使用 SSPI。
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Enums.IntegratedSecurityEnum.False">
            <summary>
            使用数据库用户名密码方式登录。
            </summary>
        </member>
        <member name="T:ShSoft.Library.Infrastr.Enums.InvokeModeEnum">
            <summary>
            调用方式。
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Enums.InvokeModeEnum.WCF">
            <summary>
            通过 WCF 方式调用。
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Enums.InvokeModeEnum.WebAPI">
            <summary>
            通过 WebAPI 方式调用。
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Enums.InvokeModeEnum.WebService">
            <summary>
            通过 WebService 方式调用。
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Enums.InvokeModeEnum.Library">
            <summary>
            通过直连 Dll（动态链接库）方式调用。
            </summary>
        </member>
        <member name="T:ShSoft.Library.Infrastr.Enums.LogType">
            <summary>
            日志类型枚举。
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Enums.LogType.Debug">
            <summary>
            调试时记录的日志。
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Enums.LogType.Data">
            <summary>
            记录增删改查数据的日志。
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Enums.LogType.Query">
            <summary>
            记录数据查询的日志。
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Enums.LogType.Update">
            <summary>
            记录数据更新的日志。
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Enums.LogType.Login">
            <summary>
            记录用户登录的日志。
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Enums.LogType.Access">
            <summary>
            记录模块被访问的日志。
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Enums.LogType.Upload">
            <summary>
            记录文件上传的日志。
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Enums.LogType.Download">
            <summary>
            记录文件下载的日志。
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Enums.LogType.Warning">
            <summary>
            记录警告的日志（用户错误操作）。
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Enums.LogType.Exception">
            <summary>
            记录系统及代码异常的日志。
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Enums.LogType.Fatal">
            <summary>
            记录致命错误的日志。
            </summary>
        </member>
        <member name="T:ShSoft.Library.Infrastr.Enums.PropertyFormatEnum">
            <summary>
            属性格式枚举。
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Enums.PropertyFormatEnum.ShortDate">
            <summary>
            短日期格式，如：2015-6-6
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Enums.PropertyFormatEnum.LongDate">
            <summary>
            长日期格式，如：2015-06-06
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Enums.PropertyFormatEnum.ShortDateTime">
            <summary>
            短日期时间格式，如：2015-6-6 18:30:0
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Enums.PropertyFormatEnum.LongDateTime">
            <summary>
            长日期时间格式，如：2015-06-06 18:30:00.000000
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Enums.PropertyFormatEnum.ShortTime">
            <summary>
            短日期时间格式，如：18:30:0
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Enums.PropertyFormatEnum.LongTime">
            <summary>
            长日期时间格式，如：18:30:00.000000
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Enums.PropertyFormatEnum.Int">
            <summary>
            整数格式。
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Enums.PropertyFormatEnum.Money">
            <summary>
            货币格式，默认保留两位小数点，且带有货币符号“￥”。
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Enums.PropertyFormatEnum.Double">
            <summary>
            双精度小数格式。
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Enums.PropertyFormatEnum.Password">
            <summary>
            密码格式。
            </summary>
        </member>
        <member name="T:ShSoft.Library.Infrastr.Enums.SaveActionEnum">
            <summary>
            保存活动枚举。
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Enums.SaveActionEnum.None">
            <summary>
            默认，什么都没发生。
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Enums.SaveActionEnum.Insert">
            <summary>
            插入新对象。
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Enums.SaveActionEnum.Update">
            <summary>
            修改旧对象。
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Enums.SaveActionEnum.Delete">
            <summary>
            删除对象。
            </summary>
        </member>
        <member name="T:ShSoft.Library.Infrastr.Enums.EncryModeEnum">
            <summary>
            加密方式枚举。
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Enums.EncryModeEnum.MD5">
            <summary>
            MD5 加密，不可逆。
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Enums.EncryModeEnum.DES">
            <summary>
            DES 加密，可逆。
            </summary>
        </member>
        <member name="T:ShSoft.Library.Infrastr.Enums.ServiceErrorEnum">
            <summary>
            服务错误枚举。
            </summary>
        </member>
        <member name="T:ShSoft.Library.Infrastr.Enums.ServiceObjEnum">
            <summary>
            服务对象枚举。
            </summary>
        </member>
        <member name="T:ShSoft.Library.Infrastr.Enums.ServiceStartEnum">
            <summary>
            服务启动方式枚举。
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Enums.ServiceStartEnum.Boot">
            <summary>
            引导。
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Enums.ServiceStartEnum.System">
            <summary>
            系统。
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Enums.ServiceStartEnum.Auto">
            <summary>
            自动。
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Enums.ServiceStartEnum.Demand">
            <summary>
            需求。
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Enums.ServiceStartEnum.Disabled">
            <summary>
            禁用。
            </summary>
        </member>
        <member name="T:ShSoft.Library.Infrastr.Enums.ServiceTypeEnum">
            <summary>
            服务类型枚举。
            </summary>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Helpers.Drawing.ImageHelper.GetSourceImg(System.String)">
            <summary>
            获取源图片对象。
            </summary>
            <param name="pFilePath">图片路径。</param>
            <returns></returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Helpers.Drawing.ImageHelper.RotateImage(System.String,System.Int32)">
            <summary>
            旋转图片。
            </summary>
            <param name="pFilePath">图片文件路径。</param>
            <param name="pAngle">旋转角度。</param>
            <returns></returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Helpers.Drawing.ImageHelper.RotateImage(System.Drawing.Image,System.Int32)">
            <summary>
            旋转图片。
            </summary>
            <param name="pImage">图片对象。</param>
            <param name="pAngle">旋转角度。</param>
            <returns></returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Helpers.Drawing.ImageHelper.setGifSize(System.String,System.Int32,System.Int32)">
            <summary>
            设置GIF大小。
            </summary>
            <param name="pFilePath">图片路径</param>
            <param name="pWidth">宽</param>
            <param name="pHeight">高</param>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Helpers.Drawing.ImageHelper.bindProperty(System.Drawing.Image,System.Drawing.Image)">
            <summary>
            将源图片文件里每一帧的属性设置到新的图片对象里。
            </summary>
            <param name="pSourceImage">源图片帧</param>
            <param name="pNewImage">新的图片帧</param>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Helpers.Drawing.ImageHelper.GetEncoder(System.Drawing.Imaging.ImageFormat)">
            <summary>
            获取图片编码。
            </summary>
            <param name="pFormat">图片格式。</param>
            <returns></returns>
        </member>
        <member name="T:ShSoft.Library.Infrastr.Helpers.IO.StreamHelper">
            <summary>
            流辅助器。
            </summary>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Helpers.IO.StreamHelper.ToBytes(System.IO.Stream)">
            <summary>
            流转为 byte[] 格式。
            </summary>
            <param name="pStream"></param>
            <returns></returns>
        </member>
        <member name="T:ShSoft.Library.Infrastr.Helpers.IO.AssemblyHelper">
            <summary>
            程序集辅助器。
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Helpers.IO.AssemblyHelper._AssemblyCollection">
            <summary>
            程序集列表。
            </summary>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Helpers.IO.AssemblyHelper.LoadAssembly(System.String)">
            <summary>
            加载程序集。
            </summary>
            <param name="pAssemblyPath"></param>
            <returns></returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Helpers.IO.AssemblyHelper.loadAssemblyWithTimer(System.String)">
            <summary>
            带定时器加载程序集。
            </summary>
        </member>
        <member name="T:ShSoft.Library.Infrastr.Helpers.IO.FileWatchHelper">
            <summary>
            文件监视辅助器。
            </summary>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Helpers.IO.FileWatchHelper.#cctor">
            <summary>
            静态构造器。
            </summary>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Helpers.IO.FileWatchHelper.WatchFile(System.String)">
            <summary>
            监视文件。
            </summary>
            <param name="pFilePath">文件路径。</param>
            <returns>文件监视辅助器对象。</returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Helpers.IO.FileWatchHelper.WatchFile(System.String,System.IO.NotifyFilters)">
            <summary>
            监视文件。
            </summary>
            <param name="pFilePath">文件路径。</param>
            <param name="pNotifyFilter">监视器过滤项。</param>
            <returns>文件监视辅助器对象。</returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Helpers.IO.FileWatchHelper.WatchDirectory(System.String,System.String)">
            <summary>
            监视目录。
            </summary>
            <param name="pDirectoryPath">目录路径。</param>
            <param name="pFilter">筛选字符串，用于确定在目录中监视哪些文件。</param>
            <returns>文件监视辅助器对象。</returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Helpers.IO.FileWatchHelper.WatchDirectory(System.String,System.IO.NotifyFilters)">
            <summary>
            监视目录。
            </summary>
            <param name="pDirectoryPath">目录路径。</param>
            <param name="pNotifyFilter">要监视的变更类型。</param>
            <returns>文件监视辅助器对象。</returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Helpers.IO.FileWatchHelper.WatchDirectory(System.String,System.Boolean)">
            <summary>
            监视目录。
            </summary>
            <param name="pDirectoryPath">目录路径。</param>
            <param name="pIncludeSubdirectories">是否监视指定路径中的子目录。</param>
            <returns>文件监视辅助器对象。</returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Helpers.IO.FileWatchHelper.WatchDirectory(System.String,System.String,System.Boolean)">
            <summary>
            监视目录。
            </summary>
            <param name="pDirectoryPath">目录路径。</param>
            <param name="pFilter">筛选字符串，用于确定在目录中监视哪些文件。</param>
            <param name="pIncludeSubdirectories">是否监视指定路径中的子目录。</param>
            <returns>文件监视辅助器对象。</returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Helpers.IO.FileWatchHelper.WatchDirectory(System.String,System.String,System.IO.NotifyFilters,System.Boolean)">
            <summary>
            监视目录。
            </summary>
            <param name="pDirectoryPath">目录路径。</param>
            <param name="pFilter">筛选字符串，用于确定在目录中监视哪些文件。</param>
            <param name="pNotifyFilter">要监视的变更类型。</param>
            <param name="pIncludeSubdirectories">是否监视指定路径中的子目录。</param>
            <returns>文件监视辅助器对象。</returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Helpers.IO.FileWatchHelper.EnableWatch">
            <summary>
            启用监视。
            </summary>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Helpers.IO.FileWatchHelper.DisableWatch">
            <summary>
            禁用监视。
            </summary>
        </member>
        <member name="T:ShSoft.Library.Infrastr.Helpers.Json.JsonHelper">
            <summary>
            Json 辅助器。
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Helpers.Json.JsonHelper._DefaultEncoding">
            <summary>
            默认字符编码。
            </summary>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Helpers.Json.JsonHelper.Deserialize``1(System.String,System.Text.Encoding)">
            <summary>
            反序列化 Json 字符串（Json 字符串转对象）。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="pJsonString">要转为对象的 Json 字符串。</param>
            <returns></returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Helpers.Json.JsonHelper.Deserialize``1(System.String)">
            <summary>
            反序列化 Json 字符串（Json 字符串转对象）。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="pJsonString">要转为对象的 Json 字符串。</param>
            <returns></returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Helpers.Json.JsonHelper.Serialize(System.Object,System.Text.Encoding)">
            <summary>
            序列化对象（对象转 Json 字符串）。
            </summary>
            <param name="pObject">要转为 Json 字符串的对象。</param>
            <returns></returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Helpers.Json.JsonHelper.Serialize(System.Object)">
            <summary>
            序列化对象（对象转 Json 字符串）。
            </summary>
            <param name="pObject">要转为 Json 字符串的对象。</param>
            <returns></returns>
        </member>
        <member name="T:ShSoft.Library.Infrastr.Helpers.Object.EnumHelper">
            <summary>
            枚举辅助类。
            </summary>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Helpers.Object.EnumHelper.GetDescription(System.Enum)">
            <summary>
            获取枚举描述。
            </summary>
            <param name="pEnumObject">枚举对象。</param>
            <returns></returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Helpers.Object.EnumHelper.GetDefaultValue(System.Type)">
            <summary>
            获取枚举默认值。
            </summary>
            <param name="pEnumObject">枚举对象。</param>
            <returns></returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Helpers.Object.EnumHelper.GetDefaultValue``1">
            <summary>
            获取枚举默认值。
            </summary>
            <param name="pEnumObject">枚举对象。</param>
            <returns></returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Helpers.Object.EnumHelper.IsDefaultValue(System.Enum)">
            <summary>
            是否是枚举默认值。
            </summary>
            <param name="pEnumObject">枚举对象。</param>
            <returns></returns>
        </member>
        <member name="T:ShSoft.Library.Infrastr.Exceptions.CustomException">
            <summary>
            自定义异常。
            </summary>
        </member>
        <member name="T:ShSoft.Library.Infrastr.Exceptions.IException">
            <summary>
            异常接口。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Exceptions.IException.Code">
            <summary>
            异常代码。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Exceptions.IException.Exception">
            <summary>
            异常对象。
            </summary>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Exceptions.CustomException.#ctor(System.String,System.Exception)">
            <summary>
            构造器。
            </summary>
            <param name="pCode"></param>
            <param name="pException"></param>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Exceptions.CustomException.Code">
            <summary>
            错误代码。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Exceptions.CustomException.Exception">
            <summary>
            异常对象。
            </summary>
        </member>
        <member name="T:ShSoft.Library.Infrastr.Helpers.Exceptions.TypeConvertException">
            <summary>
            类型转换异常。
            </summary>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Helpers.Exceptions.TypeConvertException.#ctor(System.Type,System.Type)">
            <summary>
            构造器。
            </summary>
            <param name="pSourceType">源类型。</param>
            <param name="pTargetType">目标类型。</param>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Helpers.Exceptions.TypeConvertException.#ctor(System.Type,System.Type,System.Exception)">
            <summary>
            构造器。
            </summary>
            <param name="pSourceType">源类型。</param>
            <param name="pTargetType">目标类型。</param>
            <param name="pInnerException">内部异常。</param>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Helpers.Exceptions.TypeConvertException.#ctor(System.Type,System.Type,System.String)">
            <summary>
            构造器。
            </summary>
            <param name="pSourceType">源类型。</param>
            <param name="pTargetType">目标类型。</param>
            <param name="pMessage">异常信息。</param>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Helpers.Exceptions.TypeConvertException.#ctor(System.Type,System.Type,System.String,System.Exception)">
            <summary>
            构造器。
            </summary>
            <param name="pSourceType">源类型。</param>
            <param name="pTargetType">目标类型。</param>
            <param name="pMessage">异常信息。</param>
            <param name="pInnerException">内部异常。</param>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Helpers.Exceptions.TypeConvertException.#ctor(System.Type,System.Type,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            构造器。
            </summary>
            <param name="pSourceType">源类型。</param>
            <param name="pTargetType">目标类型。</param>
            <param name="pSerializationInfo">序列化信息。</param>
            <param name="pStreamingContext">序列化流的上下文。</param>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Helpers.Exceptions.TypeConvertException.SourceType">
            <summary>
            源类型。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Helpers.Exceptions.TypeConvertException.TargetType">
            <summary>
            目标类型。
            </summary>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Helpers.IO.DirectoryHandler.Create(System.String)">
            <summary>
            在指定路径中创建目录。
            </summary>
            <param name="pDirPath">目录路径 <seealso cref="T:System.String"/>。</param>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Helpers.IO.DirectoryHandler.Create(System.String,System.Security.AccessControl.DirectorySecurity)">
            <summary>
            在指定路径中创建目录。
            </summary>
            <param name="pDirPath">目录路径 <seealso cref="T:System.String"/>。</param>
        </member>
        <member name="T:ShSoft.Library.Infrastr.Helpers.IO.FileHandler">
            <summary>
            文件操作类。
            </summary>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Helpers.IO.FileHandler.GetExtendName(System.String)">
            <summary>
            获取文件扩展名。
            </summary>
            <param name="pFileName">文件名或文件路径 <seealso cref="T:System.String"/>。</param>
            <returns></returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Helpers.IO.FileHandler.IsImage(System.String)">
            <summary>
            是否是图片文件。
            </summary>
            <param name="pFileName">文件名或文件路径 <seealso cref="T:System.String"/>。</param>
            <returns></returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Helpers.IO.FileHandler.Open(System.String,System.IO.FileMode)">
            <summary>
            打开指定路径上的文件流 <seealso cref="T:System.IO.FileStream"/>，具有指定的读、写或读/写访问模式以及指定的共享选项。
            </summary>
            <param name="pFilePath">文件路径 <seealso cref="T:System.String"/>。</param>
            <param name="pFileMode">文件的打开方式 <seealso cref="T:System.IO.FileMode"/>。</param>
            <returns>已打开的文件流对象 <seealso cref="T:System.IO.FileStream"/>。</returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Helpers.IO.FileHandler.Open(System.String,System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            打开指定路径上的文件流 <seealso cref="T:System.IO.FileStream"/>，具有指定的读、写或读/写访问模式以及指定的共享选项。
            </summary>
            <param name="pFilePath">文件路径 <seealso cref="T:System.String"/>。</param>
            <param name="pFileMode">文件的打开方式 <seealso cref="T:System.IO.FileMode"/>。</param>
            <param name="pFileAccess">定义用于文件读取、写入或读取/写入访问权限的常数 <seealso cref="T:System.IO.FileAccess"/>。</param>
            <returns>已打开的文件流对象 <seealso cref="T:System.IO.FileStream"/>。</returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Helpers.IO.FileHandler.Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <summary>
            打开指定路径上的文件流 <seealso cref="T:System.IO.FileStream"/>，具有指定的读、写或读/写访问模式以及指定的共享选项。
            </summary>
            <param name="pFilePath">文件路径 <seealso cref="T:System.String"/>。</param>
            <param name="pFileMode">文件的打开方式 <seealso cref="T:System.IO.FileMode"/>。</param>
            <param name="pFileAccess">定义用于文件读取、写入或读取/写入访问权限的常数 <seealso cref="T:System.IO.FileAccess"/>。</param>
            <param name="pFileShare">包含用于控制其他 <seealso cref="T:System.IO.FileStream"/> 对象对同一文件可以具有的访问类型的常数 <seealso cref="T:System.IO.FileShare"/>。</param>
            <returns>已打开的文件流对象 <seealso cref="T:System.IO.FileStream"/>。</returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Helpers.IO.FileHandler.Create(System.String)">
            <summary>
            在指定路径中创建或覆盖文件。
            </summary>
            <param name="pFilePath">文件路径 <seealso cref="T:System.String"/>。</param>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Helpers.IO.FileHandler.Create(System.String,System.Int32)">
            <summary>
            在指定路径中创建或覆盖文件。
            </summary>
            <param name="pFilePath">文件路径 <seealso cref="T:System.String"/>。</param>
            <param name="pBufferSize">用于读取和写入文件的已放入缓冲区的字节数。</param>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Helpers.IO.FileHandler.Create(System.String,System.Int32,System.IO.FileOptions)">
            <summary>
            在指定路径中创建或覆盖文件。
            </summary>
            <param name="pFilePath">文件路径 <seealso cref="T:System.String"/>。</param>
            <param name="pBufferSize">用于读取和写入文件的已放入缓冲区的字节数 <seealso cref="T:System.Int32"/>。</param>
            <param name="pFileOptions"><seealso cref="T:System.IO.FileOptions"/> 值之一，它描述如何创建或覆盖该文件。</param>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Helpers.IO.FileHandler.GetLineCount(System.String)">
            <summary>
            获取行总数（int）。
            </summary>
            <param name="pFilePath">文件路径 <seealso cref="T:System.String"/>。</param>
            <returns>文件总行数（整型） <seealso cref="T:System.Int32"/>。</returns>
            <exception cref="T:System.OverflowException"></exception>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Helpers.IO.FileHandler.GetLineLongCount(System.String)">
            <summary>
            获取行总数（long）。
            </summary>
            <param name="pFilePath">文件路径 <seealso cref="T:System.String"/>。</param>
            <returns>文件总行数（长整型） <seealso cref="!:System.Long"/>。</returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Helpers.IO.FileHandler.ReadLines(System.String)">
            <summary>
            读取指定文件所有行文本内容。
            </summary>
            <param name="pFilePath">文件路径 <seealso cref="T:System.String"/>。</param>
            <returns>文件所有行文本内容 <seealso cref="!:System.String[]"/>。</returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Helpers.IO.FileHandler.ReadLine(System.String,System.Int64)">
            <summary>
            读取指定文件指定行文本内容。
            </summary>
            <param name="pFilePath">文件路径 <seealso cref="T:System.String"/>。</param>
            <param name="pIndex">行索引 <seealso cref="!:System.Long"/>。</param>
            <returns>文件指定行的文本内容 <seealso cref="T:System.String"/>。</returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Helpers.IO.FileHandler.ReadText(System.String)">
            <summary>
            读取指定文件的文本内容。
            </summary>
            <param name="pFilePath">文件路径 <seealso cref="T:System.String"/>。</param>
            <returns>文件文本内容 <seealso cref="T:System.String"/>。</returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Helpers.IO.FileHandler.ReadBytes(System.String)">
            <summary>
            读取指定文件的二进制内容。
            </summary>
            <param name="pFilePath">文件路径 <seealso cref="T:System.String"/>。</param>
            <returns>文件二进制内容 <seealso cref="!:System.Byte[]"/>。</returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Helpers.IO.FileHandler.ReadBytes(System.String,System.Int64,System.Int64)">
            <summary>
            读取指定文件的二进制内容。
            </summary>
            <param name="pFilePath">文件路径 <seealso cref="T:System.String"/>。</param>
            <param name="pFromIndex">从指定索引开始读。</param>
            <param name="pLength">读取长度（字节）。</param>
            <returns>文件二进制内容 <seealso cref="!:System.Byte[]"/>。</returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Helpers.IO.FileHandler.WriteBytes(System.String,System.Byte[])">
            <summary>
            向指定文件写入二进制内容。如果文件已存在，则覆盖原文件，否则创建新文件后写入。
            </summary>
            <param name="pFilePath">文件路径 <seealso cref="T:System.String"/>。</param>
            <param name="pBytes">二进制内容 <seealso cref="!:System.Byte[]"/>。</param>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Helpers.IO.FileHandler.AppendBytes(System.String,System.Byte[])">
            <summary>
            向指定文件追加二进制内容。
            </summary>
            <param name="pFilePath">文件路径 <seealso cref="T:System.String"/>。</param>
            <param name="pBytes">二进制内容 <seealso cref="!:System.Byte[]"/>。</param>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Helpers.IO.FileHandler.AppendText(System.String,System.String)">
            <summary>
            向指定文件追加文本内容。
            </summary>
            <param name="pFilePath">文件路径 <seealso cref="T:System.String"/>。</param>
            <param name="pContent">文本内容 <seealso cref="T:System.String"/>。</param>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Helpers.IO.FileHandler.Join(System.String,System.String[])">
            <summary>
            按顺序合并指定文件组至新文件。
            </summary>
            <param name="pTargetPath">合并后文件路径 <seealso cref="T:System.String"/>。</param>
            <param name="pSourcePaths">源文件路径数组（按合并写入先后顺序） <seealso cref="!:System.String[]"/>。</param>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Helpers.IO.FileHandler.Merge(System.String,System.String[])">
            <summary>
            按顺序合并指定文件组至新文件。
            </summary>
            <param name="pTargetPath">合并后文件路径 <seealso cref="T:System.String"/>。</param>
            <param name="pSourcePaths">源文件路径数组（按合并写入先后顺序） <seealso cref="!:System.String[]"/>。</param>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Helpers.IO.FileHandler.Copy(System.String,System.String)">
            <summary>
            拷贝文件。
            </summary>
            <param name="pSourceFile"></param>
            <param name="pTargetFile"></param>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Helpers.IO.FileHandler.Close(System.IO.FileStream)">
            <summary>
            关闭指定文件流。
            </summary>
            <param name="pFileStream">已经打开的文件流对象 <seealso cref="T:System.IO.FileStream"/>。</param>
        </member>
        <member name="T:ShSoft.Library.Infrastr.Helpers.IO.HashFileHelper">
            <summary>
            计算文件Hash值帮助类。
            </summary>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Helpers.IO.HashFileHelper.MD5File(System.String)">
            <summary>
            计算文件的 MD5 值
            </summary>
            <param name="fileName">要计算 MD5 值的文件名和路径</param>
            <returns>MD5 值16进制字符串</returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Helpers.IO.HashFileHelper.SHA1File(System.String)">
            <summary>
            计算文件的 sha1 值
            </summary>
            <param name="fileName">要计算 sha1 值的文件名和路径</param>
            <returns>sha1 值16进制字符串</returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Helpers.IO.HashFileHelper.HashFile(System.String,System.String)">
            <summary>
            计算文件的哈希值
            </summary>
            <param name="fileName">要计算哈希值的文件名和路径</param>
            <param name="algName">算法:sha1,md5</param>
            <returns>哈希值16进制字符串</returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Helpers.IO.HashFileHelper.HashData(System.IO.Stream,System.String)">
            <summary>
            计算哈希值
            </summary>
            <param name="stream">要计算哈希值的 Stream</param>
            <param name="algName">算法:sha1,md5</param>
            <returns>哈希值字节数组</returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Helpers.IO.HashFileHelper.ByteArrayToHexString(System.Byte[])">
            <summary>
            字节数组转换为16进制表示的字符串
            </summary>
        </member>
        <member name="T:ShSoft.Library.Infrastr.Helpers.String.PermutationAndCombination`1">
            <summary>
            排列与组合。
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Helpers.String.PermutationAndCombination`1.Swap(`0@,`0@)">
            <summary>
            交换两个变量
            </summary>
            <param name="a">变量1</param>
            <param name="b">变量2</param>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Helpers.String.PermutationAndCombination`1.GetCombination(System.Collections.Generic.List{`0[]}@,`0[],System.Int32,System.Int32,System.Int32[],System.Int32)">
            <summary>
            递归算法求数组的组合(私有成员)
            </summary>
            <param name="list">返回的范型</param>
            <param name="t">所求数组</param>
            <param name="n">辅助变量</param>
            <param name="m">辅助变量</param>
            <param name="b">辅助数组</param>
            <param name="M">辅助变量M</param>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Helpers.String.PermutationAndCombination`1.GetPermutation(System.Collections.Generic.List{`0[]}@,`0[],System.Int32,System.Int32)">
            <summary>
            递归算法求排列(私有成员)
            </summary>
            <param name="list">返回的列表</param>
            <param name="t">所求数组</param>
            <param name="startIndex">起始标号</param>
            <param name="endIndex">结束标号</param>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Helpers.String.PermutationAndCombination`1.GetPermutation(`0[],System.Int32,System.Int32)">
            <summary>
            求从起始标号到结束标号的排列，其余元素不变
            </summary>
            <param name="t">所求数组</param>
            <param name="startIndex">起始标号</param>
            <param name="endIndex">结束标号</param>
            <returns>从起始标号到结束标号排列的范型</returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Helpers.String.PermutationAndCombination`1.GetPermutation(`0[])">
            <summary>
            返回数组所有元素的全排列
            </summary>
            <param name="t">所求数组</param>
            <returns>全排列的范型</returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Helpers.String.PermutationAndCombination`1.GetPermutation(`0[],System.Int32)">
            <summary>
            求数组中n个元素的排列
            </summary>
            <param name="t">所求数组</param>
            <param name="n">元素个数</param>
            <returns>数组中n个元素的排列</returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Helpers.String.PermutationAndCombination`1.GetCombination(`0[],System.Int32)">
            <summary>
            求数组中n个元素的组合
            </summary>
            <param name="t">所求数组</param>
            <param name="n">元素个数</param>
            <returns>数组中n个元素的组合的范型</returns>
        </member>
        <member name="T:ShSoft.Library.Infrastr.Helpers.String.StringHelper">
            <summary>
            字符串辅助类。
            </summary>
        </member>
        <member name="T:ShSoft.Library.Infrastr.Helpers.Extension.ProcessHelper">
            <summary>
            进程辅助器。
            </summary>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Helpers.Extension.ProcessHelper.Start(System.String)">
            <summary>
            启动指定应用程序或执行命令。
            </summary>
            <param name="pFileName">应用程序路径或命令名称。</param>
            <returns>返回关联进程终止时指定的值。</returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Helpers.Extension.ProcessHelper.Start(ShSoft.Library.Infrastr.Helpers.Extension.ProcessHelper@,System.String)">
            <summary>
            启动指定应用程序或执行命令。
            </summary>
            <param name="pProcessHelper">进程辅助器对象。</param>
            <param name="pFileName">应用程序路径或命令名称。</param>
            <returns>返回关联进程终止时指定的值。</returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Helpers.Extension.ProcessHelper.Start(System.String,System.String)">
            <summary>
            启动指定应用程序或执行命令。
            </summary>
            <param name="pFileName">应用程序路径或命令名称。</param>
            <param name="pArguments">应用程序或命令的参数。</param>
            <returns>返回关联进程终止时指定的值。</returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Helpers.Extension.ProcessHelper.Start(ShSoft.Library.Infrastr.Helpers.Extension.ProcessHelper@,System.String,System.String)">
            <summary>
            启动指定应用程序或执行命令。
            </summary>
            <param name="pProcessHelper">进程辅助器对象。</param>
            <param name="pFileName">应用程序路径或命令名称。</param>
            <param name="pArguments">应用程序或命令的参数。</param>
            <returns>返回关联进程终止时指定的值。</returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Helpers.Extension.ProcessHelper.Start(System.String,System.String,System.Boolean,System.Boolean,System.Diagnostics.ProcessWindowStyle)">
            <summary>
            启动指定应用程序或执行命令。
            </summary>
            <param name="pFileName">应用程序路径或命令名称。</param>
            <param name="pArguments">应用程序或命令的参数。</param>
            <param name="pCreateNoWindows">是否在新窗口中启动该进程。</param>
            <param name="pUseShellExcute">是否使用操作系统 shell 启动进程。</param>
            <param name="pWindowStyle">启动进程时使用的窗口状态。</param>
            <returns>返回关联进程终止时指定的值。</returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Helpers.Extension.ProcessHelper.Start(ShSoft.Library.Infrastr.Helpers.Extension.ProcessHelper@,System.String,System.String,System.Boolean,System.Boolean,System.Diagnostics.ProcessWindowStyle)">
            <summary>
            启动指定应用程序或执行命令。
            </summary>
            <param name="pProcessHelper">进程辅助器对象。</param>
            <param name="pFileName">应用程序路径或命令名称。</param>
            <param name="pArguments">应用程序或命令的参数。</param>
            <param name="pCreateNoWindows">是否在新窗口中启动该进程。</param>
            <param name="pUseShellExcute">是否使用操作系统 shell 启动进程。</param>
            <param name="pWindowStyle">启动进程时使用的窗口状态。</param>
            <returns>返回关联进程终止时指定的值。</returns>
        </member>
        <member name="E:ShSoft.Library.Infrastr.Helpers.Extension.ProcessHelper.ProcessStarted">
            <summary>
            当应用程序开始时发生。
            </summary>
        </member>
        <member name="T:ShSoft.Library.Infrastr.Helpers.Xml.XmlHelper">
            <summary>
            Xml 辅助器。
            </summary>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Helpers.Xml.XmlHelper.SerializeObject(System.Object)">
            <summary>
            序列化对象为 XML 字符串。
            </summary>
            <param name="pObject"></param>
            <returns></returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Helpers.Xml.XmlHelper.DeserializeObject``1(System.String)">
            <summary>
            反序列化 XML 字符串为对象。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="pXmlString">XML 字符串。</param>
            <returns></returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Helpers.Xml.XmlHelper.DeserializeObject``1(System.Xml.XmlDocument)">
            <summary>
            反序列化 XML 字符串为对象。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="pXmlString">XML 字符串。</param>
            <returns></returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Helpers.Xml.XmlHelper.DeserializeObject(System.Type,System.String)">
            <summary>
            反序列化 XML 字符串为对象。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="pXmlString">XML 字符串。</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.Xml.XmlException"></exception>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Helpers.Xml.XmlHelper.DeserializeObject(System.Type,System.Xml.XmlDocument)">
            <summary>
            反序列化 XML 字符串为对象。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="pXmlString">XML 字符串。</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="T:ShSoft.Library.Infrastr.ICompositeType`1">
            <summary>
            符合类型接口。
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:ShSoft.Library.Infrastr.ICompositeType`1.Data">
            <summary>
            获取复合类型数据。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.ICompositeType`1.State">
            <summary>
            获取复合类型状态。
            </summary>
        </member>
        <member name="T:ShSoft.Library.Infrastr.ICompositeType">
            <summary>
            符合类型接口。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.ICompositeType.Data">
            <summary>
            获取复合类型数据。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.ICompositeType.State">
            <summary>
            获取复合类型状态。
            </summary>
        </member>
        <member name="T:ShSoft.Library.Infrastr.Models.BaseDModel`1">
            <summary>
            基础领域对象模型。
            </summary>
        </member>
        <member name="T:ShSoft.Library.Infrastr.Models.Interfaces.IDomainModel`1">
            <summary>
            域模型接口。
            </summary>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="T:ShSoft.Library.Infrastr.Models.Interfaces.IModel">
            <summary>
            模型接口。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Models.Interfaces.IDomainModel`1.Id">
            <summary>
            域模型主键。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Models.BaseDModel`1.Id">
            <summary>
            领域模型编号（一般对应表中的主键）。
            </summary>
        </member>
        <member name="T:ShSoft.Library.Infrastr.Models.BaseDTOModel`1">
            <summary>
            基础传输对象模型。
            </summary>
        </member>
        <member name="T:ShSoft.Library.Infrastr.Models.Interfaces.IDTOModel`1">
            <summary>
            DTO 模型接口。
            </summary>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Models.Interfaces.IDTOModel`1.Id">
            <summary>
            DTO 模型主键。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Models.BaseDTOModel`1.Id">
            <summary>
            DTO 模型主键（一般对应领域模型的主键）。
            </summary>
        </member>
        <member name="T:ShSoft.Library.Infrastr.Models.BasicDataInfo">
            <summary>
            基础数据信息（一般用于存储状态、类别等不常变更或无变更的数据）。
            </summary>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Models.BasicDataInfo.#ctor">
            <summary>
            构造器。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Models.BasicDataInfo.Id">
            <summary>
            基础数据编号（技术主键）。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Models.BasicDataInfo.PlatformId">
            <summary>
            平台编号。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Models.BasicDataInfo.ParentId">
            <summary>
            父级基础数据编号。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Models.BasicDataInfo.Name">
            <summary>
            显示名称。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Models.BasicDataInfo.Value">
            <summary>
            存储值。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Models.BasicDataInfo.OrderNum">
            <summary>
            基础数据排序号码。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Models.BasicDataInfo.Description">
            <summary>
            基础数据描述。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Models.BasicDataInfo.SubBasicDataList">
            <summary>
            子基础数据列表。
            </summary>
        </member>
        <member name="T:ShSoft.Library.Infrastr.Models.DbConfigInfo">
            <summary>
            数据库配置信息。
            </summary>
        </member>
        <member name="T:ShSoft.Library.Infrastr.Models.IConfigInfo`1">
            <summary>
            配置信息。用于统一各种配置存储格式，如：数据库连接配置、各系统/项目服务配置等。
            </summary>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Models.IConfigInfo`1.Key">
            <summary>
            配置信息键。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Models.IConfigInfo`1.Value">
            <summary>
            配置信息值。
            </summary>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Models.DbConfigInfo.#ctor(System.String)">
            <summary>
            初始化数据库配置信息 <seealso cref="T:ShSoft.Library.Infrastr.Models.DbConfigInfo"/> 对象。
            </summary>
            <param name="pKey">数据库配置键 <seealso cref="T:System.String"/>。</param>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Models.DbConfigInfo.#ctor(System.String,ShSoft.Library.Infrastr.Enums.DatabaseSoftEnum,System.String,System.String)">
            <summary>
            初始化数据库配置信息 <seealso cref="T:ShSoft.Library.Infrastr.Models.DbConfigInfo"/> 对象。
            </summary>
            <param name="pKey">数据库配置键 <seealso cref="T:System.String"/>。</param>
            <param name="pDatabaseSoft">数据库所使用的软件（MSSQLServer、Oracle、MySQL、SyBase、DB2、SQLite等） <seealso cref="T:ShSoft.Library.Infrastr.Enums.DatabaseSoftEnum"/>。</param>
            <param name="pServerAddress">数据库服务器地址或主机名 <seealso cref="T:System.String"/>。</param>
            <param name="pDatabaseName">数据库实体名称 <seealso cref="T:System.String"/>。</param>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Models.DbConfigInfo.#ctor(System.String,ShSoft.Library.Infrastr.Enums.DatabaseSoftEnum,System.String,System.String,ShSoft.Library.Infrastr.Enums.IntegratedSecurityEnum,System.String,System.String)">
            <summary>
            初始化数据库配置信息 <seealso cref="T:ShSoft.Library.Infrastr.Models.DbConfigInfo"/> 对象。
            </summary>
            <param name="pKey">数据库配置键 <seealso cref="T:System.String"/>。</param>
            <param name="pDatabaseSoft">数据库所使用的软件（MSSQLServer、Oracle、MySQL、SyBase、DB2、SQLite等） <seealso cref="T:ShSoft.Library.Infrastr.Enums.DatabaseSoftEnum"/>。</param>
            <param name="pServerAddress">数据库服务器地址或主机名 <seealso cref="T:System.String"/>。</param>
            <param name="pDatabaseName">数据库实体名称 <seealso cref="T:System.String"/>。</param>
            <param name="pIntegratedSecurity">数据库连接安全方式 <seealso cref="T:System.String"/>。</param>
            <param name="pUserID">数据库用户名 <seealso cref="T:System.String"/>。</param>
            <param name="pPassword">数据库密码 <seealso cref="T:System.String"/>。</param>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Models.DbConfigInfo.FilePath">
            <summary>
            数据库配置所在文件路径。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Models.DbConfigInfo.DatabaseSoft">
            <summary>
            数据库软件（数据库驱动类型）。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Models.DbConfigInfo.DatabaseVersion">
            <summary>
            数据库版本。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Models.DbConfigInfo.ServerAddress">
            <summary>
            数据库服务器地址，同 Data Source、Server。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Models.DbConfigInfo.DatabaseName">
            <summary>
            数据库名称，同Initial Catalog、Database。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Models.DbConfigInfo.IntegratedSecurity">
            <summary>
            数据库整体安全，同Integrated Security、Trusted_Connection。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Models.DbConfigInfo.UserID">
            <summary>
            数据库用户名，同User ID、uid。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Models.DbConfigInfo.Password">
            <summary>
            数据库密码，同Password、PWD。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Models.DbConfigInfo.Key">
            <summary>
            数据库配置键。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Models.DbConfigInfo.Value">
            <summary>
            数据库配置值（连接字符串）。
            </summary>
        </member>
        <member name="T:ShSoft.Library.Infrastr.Models.DbConfigMapping">
            <summary>
            数据库配置映射。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Models.DbConfigMapping.RepositoryID">
            <summary>
            仓库编号。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Models.DbConfigMapping.DbConfigInfo">
            <summary>
            数据库配置信息。
            </summary>
        </member>
        <member name="T:ShSoft.Library.Infrastr.Models.DbContextInfo">
            <summary>
            数据库上下文信息。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Models.DbContextInfo.Name">
            <summary>
            上下文类路径。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Models.DbContextInfo.AssemblyName">
            <summary>
            上下文所在程序集名称。
            </summary>
        </member>
        <member name="T:ShSoft.Library.Infrastr.Models.Interfaces.IPurviewModel`1">
            <summary>
            权限信息实体（用于统一权限控制）。
            </summary>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Models.Interfaces.IPurviewModel`1.Id">
            <summary>
            权限编号（技术主键）。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Models.Interfaces.IPurviewModel`1.Name">
            <summary>
            权限名称。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Models.Interfaces.IPurviewModel`1.ModelId">
            <summary>
            对应模块编号。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Models.Interfaces.IPurviewModel`1.ModelName">
            <summary>
            模块名称。
            </summary>
        </member>
        <member name="T:ShSoft.Library.Infrastr.Models.Interfaces.IResultPagedData">
            <summary>
            结果分页数据接口。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Models.Interfaces.IResultPagedData.RecordCount">
            <summary>
            记录总数。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Models.Interfaces.IResultPagedData.PageIndex">
            <summary>
            当前页索引。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Models.Interfaces.IResultPagedData.PageSize">
            <summary>
            每页记录数。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Models.Interfaces.IResultPagedData.PageCount">
            <summary>
            总页数。
            </summary>
        </member>
        <member name="T:ShSoft.Library.Infrastr.Models.Interfaces.IRoleModel`1">
            <summary>
            角色信息实体（用于统一权限控制）。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Models.Interfaces.IRoleModel`1.Id">
            <summary>
            角色编号（技术主键）。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Models.Interfaces.IRoleModel`1.RoleName">
            <summary>
            角色名称。
            </summary>
        </member>
        <member name="T:ShSoft.Library.Infrastr.Models.Interfaces.IUserModel`1">
            <summary>
            用户实体接口，定义用户信息必有的属性（用于统一用户信息存储及权限控制）。
            </summary>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Models.Interfaces.IUserModel`1.Id">
            <summary>
            用户编号（技术主键）。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Models.Interfaces.IUserModel`1.Account">
            <summary>
            获取或设置用户的账号（业务主键）。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Models.Interfaces.IUserModel`1.Name">
            <summary>
            获取或设置用户的姓名。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Models.Interfaces.IUserModel`1.Nickname">
            <summary>
            获取或设置用户的昵称。
            </summary>
        </member>
        <member name="T:ShSoft.Library.Infrastr.Models.Interfaces.IControllerModel`1">
            <summary>
            控件信息实体（用于统一控件级权限控制）。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Models.Interfaces.IControllerModel`1.Id">
            <summary>
            控件编号（技术主键）。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Models.Interfaces.IControllerModel`1.Name">
            <summary>
            控件名称（展现层设置的 Id 值）。
            </summary>
        </member>
        <member name="T:ShSoft.Library.Infrastr.Models.Interfaces.IOrganizationModel`1">
            <summary>
            组织机构信息实体（用于统一权限控制）。
            </summary>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Models.Interfaces.IOrganizationModel`1.Id">
            <summary>
            组织机构编号（技术主键）。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Models.Interfaces.IOrganizationModel`1.Name">
            <summary>
            组织机构名称。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Models.Interfaces.IOrganizationModel`1.ParentId">
            <summary>
            父级组织机构编号。
            </summary>
        </member>
        <member name="T:ShSoft.Library.Infrastr.Models.Interfaces.IResultData">
            <summary>
            结果数据结构化抽象对象，用于统一结果数据结构。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Models.Interfaces.IResultData.State">
            <summary>
            获取结果数据状态。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Models.Interfaces.IResultData.Message">
            <summary>
            获取执行结果描述信息。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Models.Interfaces.IResultData.Exception">
            <summary>
            获取执行过程中遇到的异常。
            </summary>
        </member>
        <member name="T:ShSoft.Library.Infrastr.Models.LogInfo">
            <summary>
            日志信息。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Models.LogInfo.Type">
            <summary>
            日志类型。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Models.LogInfo.Exception">
            <summary>
            异常对象。
            </summary>
        </member>
        <member name="T:ShSoft.Library.Infrastr.Models.ModuleInfo">
            <summary>
            模块信息。
            </summary>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Models.ModuleInfo.#ctor">
            <summary>
            构造函数。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Models.ModuleInfo.Id">
            <summary>
            模块编号。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Models.ModuleInfo.Name">
            <summary>
            模块名称。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Models.ModuleInfo.FilePath">
            <summary>
            模块配置所在文件路径。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Models.ModuleInfo.Uri">
            <summary>
            模块地址（指向页面地址）。
            </summary>
        </member>
        <member name="T:ShSoft.Library.Infrastr.Models.RepositoryConfigInfo">
            <summary>
            仓储配置信息。
            </summary>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Models.RepositoryConfigInfo.#ctor(System.String,System.String,System.String)">
            <summary>
            构造器。
            </summary>
            <param name="pKey"></param>
            <param name="pValue"></param>
            <param name="pAssemblyName">仓库程序集文件名。</param>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Models.RepositoryConfigInfo.#ctor(System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,ShSoft.Library.Infrastr.Models.DbContextInfo},System.Collections.Generic.Dictionary{ShSoft.Library.Infrastr.Enums.AccessTypeEnum,System.String})">
            <summary>
            构造器。
            </summary>
            <param name="pKey"></param>
            <param name="pValue"></param>
            <param name="pAssemblyName">仓库程序集文件名。</param>
            <param name="pContextNames">数据库上下文名称集合。</param>
            <param name="pDbConfigNames">数据库配置名集合。</param>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Models.RepositoryConfigInfo.Key">
            <summary>
            仓库配置信息键（name 属性）。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Models.RepositoryConfigInfo.FilePath">
            <summary>
            仓储配置所在文件路径。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Models.RepositoryConfigInfo.Value">
            <summary>
            仓库配置信息值。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Models.RepositoryConfigInfo.AssemblyName">
            <summary>
            仓库程序集文件名。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Models.RepositoryConfigInfo.ContextNames">
            <summary>
            数据库上下文配置名集合。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Models.RepositoryConfigInfo.DbConfigNames">
            <summary>
            数据库配置名集合。
            </summary>
        </member>
        <member name="T:ShSoft.Library.Infrastr.Models.ServiceInvokeInfo">
            <summary>
            服务调用信息。
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Models.ServiceInvokeInfo._BindingTypeText">
            <summary>
            绑定类型文本。
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Models.ServiceInvokeInfo._BindingType">
            <summary>
            绑定类型。
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Models.ServiceInvokeInfo._Security_Message_ClientCredentialType">
            <summary>
            消息凭据类型。
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Models.ServiceInvokeInfo._Security_Transport_ClientCredentialType">
            <summary>
            客户端的有效凭据类型。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Models.ServiceInvokeInfo.Name">
            <summary>
            服务名称。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Models.ServiceInvokeInfo.FilePath">
            <summary>
            服务配置所在文件路径。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Models.ServiceInvokeInfo.InvokeMode">
            <summary>
            调用方式。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Models.ServiceInvokeInfo.AssemblyPath">
            <summary>
            服务接口实现类的程序集路径。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Models.ServiceInvokeInfo.Namespace">
            <summary>
            服务接口实现类的命名空间。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Models.ServiceInvokeInfo.Url">
            <summary>
            服务地址（如果是 WCF、WebAPI 方式，则为 WCF 地址；如果是 Library 方式，则为类库路径）。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Models.ServiceInvokeInfo.MethodName">
            <summary>
            方法名称。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Models.ServiceInvokeInfo.BindingTypeText">
            <summary>
            绑定类型文本。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Models.ServiceInvokeInfo.BindingType">
            <summary>
            绑定类型。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Models.ServiceInvokeInfo.ReliableSession_Enabled">
            <summary>
            可靠的会话 - 是否启用。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Models.ServiceInvokeInfo.ReliableSession_BindingElement_Ordered">
            <summary>
            可靠的会话 - 绑定元素 - 是否按发送时的顺序传递。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Models.ServiceInvokeInfo.ReliableSession_BindingElement_FlowControlEnabled">
            <summary>
            可靠的会话 - 绑定元素 - 是否已启用流控制。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Models.ServiceInvokeInfo.ReliableSession_BindingElement_InactivityTimeout">
            <summary>
            可靠的会话 - 绑定元素 - 闲置超时时间（非活动状态的时间间隔）。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Models.ServiceInvokeInfo.Security_Message_ClientCredentialType">
            <summary>
            消息的有效凭据类型。
            </summary>
            <remarks>
            Certificate
            IssuedToken
            None
            UserName
            Windows
            </remarks>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Models.ServiceInvokeInfo.Security_Transport_ClientCredentialType">
            <summary>
            客户端的有效凭据类型。
            </summary>
            <remarks>
            Basic
            Certificate
            Digest
            InheritedFromHost
            None
            Ntlm
            Windows
            </remarks>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Models.ServiceInvokeInfo.TransactionFlow">
            <summary>
            是否开启事务流。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Models.ServiceInvokeInfo.SecurityMode">
            <summary>
            绑定安全模式。
            </summary>
        </member>
        <member name="T:ShSoft.Library.Infrastr.Models.ShPagedList`1">
            <summary>
            分页列表类。用于后端业务数据处理。
            </summary>
            <typeparam name="T">数据类型</typeparam>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Models.ShPagedList`1.#ctor">
            <summary>
            构造一个分页列表对象。
            </summary>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Models.ShPagedList`1.#ctor(System.Linq.IQueryable{`0},System.Int32,System.Int32)">
            <summary>
            构造一个分页列表对象。
            </summary>
            <param name="pAllItems">分页前全部数据。</param>
            <param name="pPageIndex">当前分页索引。</param>
            <param name="pPageSize">每页条数。</param>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Models.ShPagedList`1.#ctor(System.Linq.IQueryable{`0},System.Int32,System.Int32,System.Int32)">
            <summary>
            构造一个分页列表对象。
            </summary>
            <param name="pCurrentPageItems">当前页对应数据。</param>
            <param name="pPageIndex">当前分页索引。</param>
            <param name="pPageSize">每页条数。</param>
            <param name="pTotalItemCount">条数总计。</param>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Models.ShPagedList`1.CurrentPageIndex">
            <summary>
            当前页索引。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Models.ShPagedList`1.PageSize">
            <summary>
            每页条数。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Models.ShPagedList`1.TotalItemCount">
            <summary>
            条数总计。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Models.ShPagedList`1.TotalPageCount">
            <summary>
            页数总计。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Models.ShPagedList`1.StartItemIndex">
            <summary>
            开始索引。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Models.ShPagedList`1.EndItemIndex">
            <summary>
            结束索引。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Models.ShPagedList`1.Empty">
            <summary>
            默认值。
            </summary>
        </member>
        <member name="T:ShSoft.Library.Infrastr.Models.SortordInfo">
            <summary>
            排序方式信息。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Models.SortordInfo.FieldName">
            <summary>
            字段名称。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Models.SortordInfo.SortDirection">
            <summary>
            排序方向。
            </summary>
        </member>
        <member name="T:ShSoft.Library.Infrastr.Models.UploadFileModel">
            <summary>
            上传文件类。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Models.UploadFileModel.FMId">
            <summary>
            文件编号
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Models.UploadFileModel.VirtualFilePath">
            <summary>
            文件虚拟路径。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Models.UploadFileModel.PhyiscalFilePath">
            <summary>
            物理文件路径。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Models.UploadFileModel.FileName">
            <summary>
            文件原始名称。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Models.UploadFileModel.FileSize">
            <summary>
            文件大小。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Models.UploadFileModel.Extension">
            <summary>
            文件扩展名。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Models.UploadFileModel.MD5">
            <summary>
            文件MD5值
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Models.UploadFileModel.SHA1">
            <summary>
            文件SHA1值
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Models.UploadFileModel.FileSizeShow">
            <summary>
            文件大小显示
            </summary>
        </member>
        <member name="T:ShSoft.Library.Infrastr.Repositories.AndSpecification">
            <summary>
            数据库访问层“与”规则。
            </summary>
        </member>
        <member name="T:ShSoft.Library.Infrastr.Repositories.CompositeSpecification">
            <summary>
            数据库访问层组合规则。
            </summary>
        </member>
        <member name="T:ShSoft.Library.Infrastr.Repositories.Interfaces.ISpecification">
            <summary>
            规则接口。
            </summary>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Repositories.Interfaces.ISpecification.IsSatisfiedBy(System.Object)">
            <summary>
            是否满足。
            </summary>
            <param name="pCandidate"></param>
            <returns></returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Repositories.Interfaces.ISpecification.And(ShSoft.Library.Infrastr.Repositories.Interfaces.ISpecification)">
            <summary>
            增加“与”规则。
            </summary>
            <param name="pOther"></param>
            <returns></returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Repositories.Interfaces.ISpecification.Or(ShSoft.Library.Infrastr.Repositories.Interfaces.ISpecification)">
            <summary>
            增加“或”规则。
            </summary>
            <param name="pOther"></param>
            <returns></returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Repositories.Interfaces.ISpecification.Not">
            <summary>
            增加“非”规则。
            </summary>
            <returns></returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Repositories.CompositeSpecification.IsSatisfiedBy(System.Object)">
            <summary>
            是否满足。
            </summary>
            <param name="pCandidate"></param>
            <returns></returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Repositories.CompositeSpecification.And(ShSoft.Library.Infrastr.Repositories.Interfaces.ISpecification)">
            <summary>
            增加“与”规则。
            </summary>
            <param name="pOther"></param>
            <returns></returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Repositories.CompositeSpecification.Or(ShSoft.Library.Infrastr.Repositories.Interfaces.ISpecification)">
            <summary>
            增加“或”规则。
            </summary>
            <param name="pOther"></param>
            <returns></returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Repositories.CompositeSpecification.Not">
            <summary>
            增加“非”规则。
            </summary>
            <returns></returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Repositories.AndSpecification.#ctor(ShSoft.Library.Infrastr.Repositories.Interfaces.ISpecification,ShSoft.Library.Infrastr.Repositories.Interfaces.ISpecification)">
            <summary>
            增加“与”规则。
            </summary>
            <param name="pSpecificationOne"></param>
            <param name="pSpecificationOther"></param>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Repositories.AndSpecification.IsSatisfiedBy(System.Object)">
            <summary>
            是否满足。
            </summary>
            <param name="pCandidate"></param>
            <returns></returns>
        </member>
        <member name="T:ShSoft.Library.Infrastr.Repositories.AndSpecification`1">
            <summary>
            数据库访问层“与”规则。
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="T:ShSoft.Library.Infrastr.Repositories.Interfaces.ISpecification`1">
            <summary>
            数据库访问层方法规则接口。
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Repositories.Interfaces.ISpecification`1.IsSatisfiedBy(`0)">
            <summary>
            实体是否满足。
            </summary>
            <param name="pEntity"></param>
            <returns></returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Repositories.Interfaces.ISpecification`1.SatisfiedBy">
            <summary>
            。
            </summary>
            <returns></returns>
        </member>
        <member name="T:ShSoft.Library.Infrastr.Repositories.ExtensionMethods">
            <summary>
            数据库访问层扩展方法。
            </summary>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Repositories.ExtensionMethods.And``1(ShSoft.Library.Infrastr.Repositories.Interfaces.ISpecification{``0},ShSoft.Library.Infrastr.Repositories.Interfaces.ISpecification{``0})">
            <summary>
            增加“与”条件。
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="pSpec1"></param>
            <param name="pSpec2"></param>
            <returns></returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Repositories.ExtensionMethods.Or``1(ShSoft.Library.Infrastr.Repositories.Interfaces.ISpecification{``0},ShSoft.Library.Infrastr.Repositories.Interfaces.ISpecification{``0})">
            <summary>
            增加“或”条件。
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="pSpec1"></param>
            <param name="pSpec2"></param>
            <returns></returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Repositories.ExtensionMethods.Not``1(ShSoft.Library.Infrastr.Repositories.Interfaces.ISpecification{``0})">
            <summary>
            增加“非”条件
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="pSpec"></param>
            <returns></returns>
        </member>
        <member name="T:ShSoft.Library.Infrastr.Repositories.BaseRepository`2">
            <summary>
            基础仓储。
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Repositories.BaseRepository`2._Repository">
            <summary>
            仓储实例对象。
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Repositories.BaseRepository`2._AssemblyCollection">
            <summary>
            程序集列表。
            </summary>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Repositories.BaseRepository`2.#ctor">
            <summary>
            构造器。
            </summary>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Repositories.BaseRepository`2.Create(`0)">
            <summary>
            默认新增方法。
            </summary>
            <param name="pEntity"></param>
            <returns></returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Repositories.BaseRepository`2.Update(`0)">
            <summary>
            默认更新方法。
            </summary>
            <param name="pEntity"></param>
            <returns></returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Repositories.BaseRepository`2.Delete(`0)">
            <summary>
            默认删除方法。
            </summary>
            <param name="pEntity"></param>
            <returns></returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Repositories.BaseRepository`2.SaveChange">
            <summary>
            保存修改。
            </summary>
            <returns>包含受影响记录数的结果数据对象。</returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Repositories.BaseRepository`2.SaveChange(ShSoft.Library.Infrastr.Repositories.Interfaces.IRepository{`0,`1})">
            <summary>
            保存修改。
            </summary>
            <param name="pRepository">仓储对象。</param>
            <returns>包含受影响记录数的结果数据对象。</returns>
        </member>
        <member name="T:ShSoft.Library.Infrastr.Repositories.Interfaces.IExtensionRepository`2">
            <summary>
            扩展的 Repository 操作规范。
            </summary>
        </member>
        <member name="T:ShSoft.Library.Infrastr.Repositories.Interfaces.IRepository`2">
            <summary>
            通用仓储接口。
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Repositories.Interfaces.IRepository`2.SaveChanges">
            <summary>
            批处理保存修改
            </summary>
            <returns>受影响的行数</returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Repositories.Interfaces.IRepository`2.BeginTransaction">
            <summary>
            开始一个事务。
            </summary>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Repositories.Interfaces.IRepository`2.RollbacksTransaction">
            <summary>
            回滚一个事务。
            </summary>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Repositories.Interfaces.IRepository`2.CommitTransaction">
            <summary>
            提交一个事务。
            </summary>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Repositories.Interfaces.IRepository`2.AddSave(`0,System.String[])">
            <summary>
            添加方法（自动保存）
            </summary>
            <param name="pModel">构造好的实体对象</param>
            <param name="pModifiedPropertyNames">要修改的属性名称。</param>
            <returns>本次添加完成后的实体对象</returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Repositories.Interfaces.IRepository`2.Add(`0,System.String[])">
            <summary>
            添加方法（手动保存）
            </summary>
            <param name="pModel">构造好的实体对象</param>
            <param name="pModifiedPropertyNames">要修改的属性名称。</param>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Repositories.Interfaces.IRepository`2.DeleteSave(`0)">
            <summary>
            根据包含主键的pModel删除一个实体对象
            物理删除，自动保存
            </summary>
            <param name="pModel">构造好的包含主键的实体对象</param>
            <returns>删除结果</returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Repositories.Interfaces.IRepository`2.Delete(`0)">
            <summary>
            根据包含主键的pModel删除一个实体对象
            物理删除，手动保存
            </summary>
            <param name="pModel">构造好的包含主键的实体对象</param>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Repositories.Interfaces.IRepository`2.DeleteSave(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据条件删除
            物理删除，自动保存
            </summary>
            <param name="pPredicate">筛选条件-返回值为bool的委托</param>
            <returns>删除成功的条数</returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Repositories.Interfaces.IRepository`2.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据条件删除
            物理删除，手动保存
            </summary>
            <param name="pPredicate">筛选条件-返回值为bool的委托</param>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Repositories.Interfaces.IRepository`2.UpdateSave(`0,System.String[])">
            <summary>
            修改方法（自动保存）
            </summary>
            <param name="pModel">构造好的实体对象</param>
            <param name="pModifiedPropertyNames">要修改的属性名称。</param>
            <returns>修改结果</returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Repositories.Interfaces.IRepository`2.Update(`0,System.String[])">
            <summary>
            修改方法（手动保存）
            </summary>
            <param name="pModel">构造好的实体对象</param>
            <param name="pModifiedPropertyNames">要修改的属性名称。</param>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Repositories.Interfaces.IRepository`2.GetModelList">
            <summary>
            获取实体对象集合
            </summary>
            <returns>实体对象集合</returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Repositories.Interfaces.IRepository`2.GetModelListWithSubEntities(System.String[])">
            <summary>
            获取实体对象集合
            </summary>
            <returns>实体对象集合</returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Repositories.Interfaces.IRepository`2.GetModelList(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            获取符合条件的实体集合
            </summary>
            <param name="pPredicate">筛选条件-返回值为bool的委托</param>
            <returns>实体对象集合</returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Repositories.Interfaces.IRepository`2.GetModelListWithSubEntities(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String[])">
            <summary>
            获取符合条件的实体集合
            </summary>
            <param name="pPredicate">筛选条件-返回值为bool的委托</param>
            <param name="pSubEntities">子实体名称。</param>
            <returns>实体对象集合</returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Repositories.Interfaces.IRepository`2.GetModelList(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`1}},System.Boolean)">
            <summary>
            获取符合条件的实体对象集合 + 排序
            </summary>
            <param name="pPredicate">筛选条件-返回值为bool的委托</param>
            <param name="pOrderBy">排序条件-返回值为TKey的委托</param>
            <param name="pIsDesc">是否是降序排序。</param>
            <returns>实体对象集合</returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Repositories.Interfaces.IRepository`2.GetModelListWithSubEntities(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`1}},System.Boolean,System.String[])">
            <summary>
            获取符合条件的实体对象集合 + 排序
            </summary>
            <param name="pPredicate">筛选条件-返回值为bool的委托</param>
            <param name="pOrderBy">排序条件-返回值为TKey的委托</param>
            <param name="pIsDesc">是否是降序排序。</param>
            <param name="pSubEntities">子实体名称。</param>
            <returns>实体对象集合</returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Repositories.Interfaces.IRepository`2.GetModelList(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`1}},System.Int32,System.Int32,System.Boolean)">
            <summary>
            获取符合条件的实体对象集合 + 排序 + 分页
            </summary>
            <param name="pPredicate">筛选条件-返回值为bool的委托</param>
            <param name="pOrderBy">排序条件-返回值为TKey的委托</param>
            <param name="pPageIndex">页码</param>
            <param name="pPageSize">页容量</param>
            <param name="pIsDesc">是否是降序排序。</param>
            <returns>实体对象集合</returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Repositories.Interfaces.IRepository`2.GetModelListWithSubEntities(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`1}},System.Int32,System.Int32,System.Boolean,System.String[])">
            <summary>
            获取符合条件的实体对象集合 + 排序 + 分页
            </summary>
            <param name="pPredicate">筛选条件-返回值为bool的委托</param>
            <param name="pOrderBy">排序条件-返回值为TKey的委托</param>
            <param name="pPageIndex">页码</param>
            <param name="pPageSize">页容量</param>
            <param name="pIsDesc">是否是降序排序。</param>
            <param name="pSubEntities">子实体名称。</param>
            <returns>实体对象集合</returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Repositories.Interfaces.IRepository`2.GetModelList(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`1}},System.Int32,System.Int32,System.Int32@,System.Boolean)">
            <summary>
            获取符合条件的实体对象集合 + 排序 + 分页 + 输出记录条数
            </summary>
            <param name="pPredicate">筛选条件-返回值为bool的委托</param>
            <param name="pOrderBy">排序条件-返回值为TKey的委托</param>
            <param name="pPageIndex">页码</param>
            <param name="pPageSize">页容量</param>
            <param name="pRowCount">记录条数</param>
            <param name="pIsDesc">是否是降序排序。</param>
            <returns>实体对象集合</returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Repositories.Interfaces.IRepository`2.GetModelListWithSubEntities(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`1}},System.Int32,System.Int32,System.Int32@,System.Boolean,System.String[])">
            <summary>
            获取符合条件的实体对象集合 + 排序 + 分页 + 输出记录条数
            </summary>
            <param name="pPredicate">筛选条件-返回值为bool的委托</param>
            <param name="pOrderBy">排序条件-返回值为TKey的委托</param>
            <param name="pPageIndex">页码</param>
            <param name="pPageSize">页容量</param>
            <param name="pRowCount">记录条数</param>
            <param name="pIsDesc">是否是降序排序。</param>
            <param name="pSubEntities">子实体名称。</param>
            <returns>实体对象集合</returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Repositories.Interfaces.IRepository`2.GetModelList(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`1}},System.Int32,System.Int32,System.Int32@,System.Int32@,System.Boolean)">
            <summary>
            获取符合条件的实体对象集合 + 排序 + 分页 + 输出记录条数与页数
            </summary>
            <param name="pPredicate">筛选条件-返回值为bool的委托</param>
            <param name="pOrderBy">排序条件-返回值为TKey的委托</param>
            <param name="pPageIndex">页码</param>
            <param name="pPageSize">页容量</param>
            <param name="pRowCount">记录条数</param>
            <param name="pPageCount">页数</param>
            <param name="pIsDesc">是否是降序排序。</param>
            <returns>实体对象集合</returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Repositories.Interfaces.IRepository`2.GetModelListWithSubEntities(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`1}},System.Int32,System.Int32,System.Int32@,System.Int32@,System.Boolean,System.String[])">
            <summary>
            获取符合条件的实体对象集合 + 排序 + 分页 + 输出记录条数与页数
            </summary>
            <param name="pPredicate">筛选条件-返回值为bool的委托</param>
            <param name="pOrderBy">排序条件-返回值为TKey的委托</param>
            <param name="pPageIndex">页码</param>
            <param name="pPageSize">页容量</param>
            <param name="pRowCount">记录条数</param>
            <param name="pPageCount">页数</param>
            <param name="pIsDesc">是否是降序排序。</param>
            <param name="pSubEntities">子实体名称。</param>
            <returns>实体对象集合</returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Repositories.Interfaces.IRepository`2.GetCount">
            <summary>
            获取总记录条数
            </summary>
            <returns>总记录条数</returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Repositories.Interfaces.IRepository`2.GetCount(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            获取符合条件的记录条数
            </summary>
            <param name="pPredicate">筛选条件-返回值为bool的委托</param>
            <returns>符合条件的记录条数</returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Repositories.Interfaces.IRepository`2.ExecuteProcedure(System.String,System.Data.Common.DbParameter[])">
            <summary>
            调用存储过程。
            </summary>
            <param name="pProcedureName">存储过程名称。</param>
            <param name="pParameters">存储过程参数。</param>
            <returns></returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Repositories.Interfaces.IRepository`2.ExecuteProcedure(System.String,System.Data.Common.DbParameter@,System.Data.Common.DbParameter[])">
            <summary>
            调用带返回值的存储过程。
            </summary>
            <param name="pProcedureName">存储过程名称。</param>
            <param name="pReturnParameter">存储过程返回参数。</param>
            <param name="pParameters">存储过程参数。</param>
            <returns></returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Repositories.Interfaces.IRepository`2.ExecuteProcedure(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter}@,System.Data.Common.DbParameter[])">
            <summary>
            调用带输出参数的存储过程。
            </summary>
            <param name="pProcedureName">存储过程名称。</param>
            <param name="pOutputParameters">存储过程输出参数。</param>
            <param name="pParameters">存储过程参数。</param>
            <returns></returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Repositories.Interfaces.IRepository`2.ExecuteProcedure(System.String,System.Data.Common.DbParameter@,System.Collections.Generic.List{System.Data.Common.DbParameter}@,System.Data.Common.DbParameter[])">
            <summary>
            调用带返回值与输出参数的存储过程。
            </summary>
            <param name="pProcedureName">存储过程名称。</param>
            <param name="pReturnParameter">存储过程返回参数。</param>
            <param name="pOutputParameters">存储过程输出参数。</param>
            <param name="pParameters">存储过程参数。</param>
            <returns></returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Repositories.Interfaces.IRepository`2.ExecuteProcedureWithQuery``2(System.String,System.Data.Common.DbParameter[])">
            <summary>
            调用带返回数据集合的查询性质的存储过程。
            </summary>
            <param name="pProcedureName">存储过程名称。</param>
            <param name="pParameters">存储过程参数。</param>
            <returns></returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Repositories.Interfaces.IRepository`2.ExecuteProcedureWithQuery``2(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter}@,System.Data.Common.DbParameter[])">
            <summary>
            调用带返回数据集合与输出参数的查询性质的存储过程。
            </summary>
            <param name="pProcedureName">存储过程名称。</param>
            <param name="pOutputParameters">存储过程输出参数。</param>
            <param name="pParameters">存储过程参数。</param>
            <returns></returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Repositories.Interfaces.IRepository`2.ExecuteProcedureWithQuery``2(System.String,System.Data.Common.DbParameter@,System.Collections.Generic.List{System.Data.Common.DbParameter}@,System.Data.Common.DbParameter[])">
            <summary>
            调用带返回数据集合与返回值、输出参数的查询性质的存储过程。
            </summary>
            <param name="pProcedureName">存储过程名称。</param>
            <param name="pReturnParameter">存储过程返回参数。</param>
            <param name="pOutputParameters">存储过程输出参数。</param>
            <param name="pParameters">存储过程参数。</param>
            <returns></returns>
        </member>
        <member name="T:ShSoft.Library.Infrastr.Repositories.Interfaces.IOrderableRepository`1">
            <summary>
            提供排序功能的规范
            </summary>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Repositories.Interfaces.IOrderableRepository`1.GetModels``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            带排序的结果集。
            </summary>
            <param name="pOrderBy"></param>
            <returns></returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Repositories.Interfaces.IOrderableRepository`1.GetModels``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            根据指定 lambda 表达式和排序方式，得到延时结果集。
            </summary>
            <param name="pOrderBy"></param>
            <param name="pPredicate"></param>
            <returns></returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Repositories.Interfaces.IExtensionRepository`2.Insert(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            添加集合，集合数目不大时用此方法，超大集合使用 BulkInsert。
            </summary>
            <param name="pEntity"></param>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Repositories.Interfaces.IExtensionRepository`2.InsertAndSave(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            添加集合，集合数目不大时用此方法，超大集合使用 BulkInsert。
            </summary>
            <param name="pEntity"></param>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Repositories.Interfaces.IExtensionRepository`2.Update(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            修改集合，集合数目不大时用此方法，超大集合使用 BulkUpdate。
            </summary>
            <param name="pEntity"></param>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Repositories.Interfaces.IExtensionRepository`2.UpdateAndSave(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            修改集合，集合数目不大时用此方法，超大集合使用 BulkUpdate。
            </summary>
            <param name="pEntity"></param>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Repositories.Interfaces.IExtensionRepository`2.Delete(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            删除集合，集合数目不大时用此方法，超大集合使用 BulkUpdate。
            </summary>
            <param name="pEntity"></param>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Repositories.Interfaces.IExtensionRepository`2.DeleteAndSave(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            删除集合，集合数目不大时用此方法，超大集合使用 BulkUpdate。
            </summary>
            <param name="pEntity"></param>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Repositories.Interfaces.IExtensionRepository`2.Update``2(System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
            扩展更新方法，只对 EF 支持。
            注意本方法不能和 GetModels() 一起使用，它的表主键可以通过post或get方式获取。
            </summary>
            <typeparam name="TT"></typeparam>
            <typeparam name="TK"></typeparam>
            <param name="pExpression"></param>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Repositories.Interfaces.IExtensionRepository`2.UpdateAndSave``2(System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
            扩展更新方法，只对 EF 支持。
            注意本方法不能和 GetModels() 一起使用，它的表主键可以通过post或get方式获取。
            </summary>
            <typeparam name="TT"></typeparam>
            <typeparam name="TK"></typeparam>
            <param name="pExpression"></param>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Repositories.Interfaces.IExtensionRepository`2.GetModels(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据指定 lambda 表达式，得到延时结果集。
            </summary>
            <param name="pPredicate"></param>
            <returns></returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Repositories.Interfaces.IExtensionRepository`2.GetFirst(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据指定 lambda 表达式，得到第一个实体。
            </summary>
            <param name="pPredicate"></param>
            <returns></returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Repositories.Interfaces.IExtensionRepository`2.BulkInsert(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            批量添加，添加之前可以去除自增属性，默认不去除。
            </summary>
            <param name="pEntity">实体参数。</param>
            <param name="pIsRemoveIdentity"></param>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Repositories.Interfaces.IExtensionRepository`2.BulkInsertAndSave(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            批量添加，添加之前可以去除自增属性，默认不去除。
            </summary>
            <param name="pEntity">实体参数。</param>
            <param name="pIsRemoveIdentity"></param>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Repositories.Interfaces.IExtensionRepository`2.BulkInsert(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            批量添加。
            </summary>
            <param name="pEntity">实体参数。</param>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Repositories.Interfaces.IExtensionRepository`2.BulkInsertAndSave(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            批量添加。
            </summary>
            <param name="pEntity">实体参数。</param>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Repositories.Interfaces.IExtensionRepository`2.BulkUpdate(System.Collections.Generic.IEnumerable{`0},System.String[])">
            <summary>
            批量更新。
            </summary>
            <param name="pEntity">实体参数。</param>
            <param name="fieldParams">要更新的字段参数。</param>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Repositories.Interfaces.IExtensionRepository`2.BulkUpdateAndSave(System.Collections.Generic.IEnumerable{`0},System.String[])">
            <summary>
            批量更新。
            </summary>
            <param name="pEntity">实体参数。</param>
            <param name="fieldParams">要更新的字段参数。</param>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Repositories.Interfaces.IExtensionRepository`2.BulkDelete(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            批量删除。
            </summary>
            <param name="pEntity">实体参数。</param>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Repositories.Interfaces.IExtensionRepository`2.BulkDeleteAndSave(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            批量删除。
            </summary>
            <param name="pEntity">实体参数。</param>
        </member>
        <member name="T:ShSoft.Library.Infrastr.Repositories.Interfaces.IOrderable`2">
            <summary>
            排序规范
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <typeparam name="TKey">主键类型。</typeparam>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Repositories.Interfaces.IOrderable`2.Asc(System.Linq.Expressions.Expression{System.Func{`0,`1}})">
            <summary>
            递增
            </summary>
            <param name="pKeySelector"></param>
            <returns></returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Repositories.Interfaces.IOrderable`2.ThenAsc(System.Linq.Expressions.Expression{System.Func{`0,`1}})">
            <summary>
            然后递增
            </summary>
            <param name="pKeySelector"></param>
            <returns></returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Repositories.Interfaces.IOrderable`2.Desc(System.Linq.Expressions.Expression{System.Func{`0,`1}})">
            <summary>
            递减
            </summary>
            <param name="pKeySelector"></param>
            <returns></returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Repositories.Interfaces.IOrderable`2.ThenDesc(System.Linq.Expressions.Expression{System.Func{`0,`1}})">
            <summary>
            然后递减
            </summary>
            <param name="pKeySelector"></param>
            <returns></returns>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Repositories.Interfaces.IOrderable`2.Queryable">
            <summary>
            排序后的结果集
            </summary>
        </member>
        <member name="T:ShSoft.Library.Infrastr.Repositories.Interfaces.ISpecificationRepository`2">
            <summary>
            EF底层构架，关于规约功能的仓储接口
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <typeparam name="TKey">主键类型。</typeparam>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Repositories.Interfaces.ISpecificationRepository`2.GetModels(ShSoft.Library.Infrastr.Repositories.Interfaces.ISpecification{`0})">
            <summary>
            根据指定规约,得到延时结果集
            </summary>
            <param name="pSpecification"></param>
            <returns></returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Repositories.Interfaces.ISpecificationRepository`2.GetFirst(ShSoft.Library.Infrastr.Repositories.Interfaces.ISpecification{`0})">
            <summary>
            根据指定规约,得到第一个实体
            </summary>
            <param name="pSpecification"></param>
            <returns></returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Repositories.Interfaces.ISpecificationRepository`2.GetModels(System.Action{ShSoft.Library.Infrastr.Repositories.Interfaces.IOrderable{`0,`1}},ShSoft.Library.Infrastr.Repositories.Interfaces.ISpecification{`0})">
            <summary>
            带排序功能的，根据指定规约，得到结果集
            </summary>
            <param name="pOrderBy"></param>
            <param name="pSpecification"></param>
            <returns></returns>
        </member>
        <member name="E:ShSoft.Library.Infrastr.Repositories.Interfaces.ISpecificationRepository`2.AfterSaved">
            <summary>
            保存之后触发
            Occurs after data saved
            </summary>
        </member>
        <member name="E:ShSoft.Library.Infrastr.Repositories.Interfaces.ISpecificationRepository`2.BeforeSaved">
            <summary>
            保存之前触发
            Occurs before data saved
            </summary>
        </member>
        <member name="T:ShSoft.Library.Infrastr.Repositories.Interfaces.IWorkContext">
            <summary>
            工作上下文。
            </summary>
        </member>
        <member name="T:ShSoft.Library.Infrastr.Repositories.NotSpecification">
            <summary>
            数据库访问层“非”规则。
            </summary>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Repositories.NotSpecification.#ctor(ShSoft.Library.Infrastr.Repositories.Interfaces.ISpecification)">
            <summary>
            添加“非”规则。
            </summary>
            <param name="pSpecification"></param>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Repositories.NotSpecification.IsSatisfiedBy(System.Object)">
            <summary>
            是否满足。
            </summary>
            <param name="pCandidate"></param>
            <returns></returns>
        </member>
        <member name="T:ShSoft.Library.Infrastr.Repositories.Orderable`2">
            <summary>
            Linq架构里对集合排序实现
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <typeparam name="TKey">主键类型。</typeparam>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Repositories.Orderable`2.#ctor(System.Linq.IQueryable{`0})">
            <summary>
            排序后的结果集
            </summary>
            <param name="enumerable"></param>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Repositories.Orderable`2.Asc(System.Linq.Expressions.Expression{System.Func{`0,`1}})">
            <summary>
            递增
            </summary>
            <param name="keySelector"></param>
            <returns></returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Repositories.Orderable`2.ThenAsc(System.Linq.Expressions.Expression{System.Func{`0,`1}})">
            <summary>
            然后递增
            </summary>
            <param name="keySelector"></param>
            <returns></returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Repositories.Orderable`2.Desc(System.Linq.Expressions.Expression{System.Func{`0,`1}})">
            <summary>
            递减
            </summary>
            <param name="keySelector"></param>
            <returns></returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Repositories.Orderable`2.ThenDesc(System.Linq.Expressions.Expression{System.Func{`0,`1}})">
            <summary>
            然后递减
            </summary>
            <param name="keySelector"></param>
            <returns></returns>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Repositories.Orderable`2.Queryable">
            <summary>
            排序之后的结果集
            </summary>
        </member>
        <member name="T:ShSoft.Library.Infrastr.Repositories.OrSpecification">
            <summary>
            数据库访问层”或”条件规则。
            </summary>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Repositories.OrSpecification.#ctor(ShSoft.Library.Infrastr.Repositories.Interfaces.ISpecification,ShSoft.Library.Infrastr.Repositories.Interfaces.ISpecification)">
            <summary>
            构造器。
            </summary>
            <param name="pSpecificationOne"></param>
            <param name="pSpecificationOther"></param>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Repositories.OrSpecification.IsSatisfiedBy(System.Object)">
            <summary>
            是否满足。
            </summary>
            <param name="pCandidate"></param>
            <returns></returns>
        </member>
        <member name="T:ShSoft.Library.Infrastr.Repositories.OrSpecification`1">
            <summary>
            “或”条件规格接口。
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="T:ShSoft.Library.Infrastr.Models.SavedEventArgs`2">
            <summary>
            保存时间参数。
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Models.SavedEventArgs`2.#ctor(ShSoft.Library.Infrastr.Enums.SaveActionEnum)">
            <summary>
            初始化 SavedEventArgs 的一个新实例。
            </summary>
            <param name="pSaveAction">保存活动类型 <seealso cref="T:ShSoft.Library.Infrastr.Enums.SaveActionEnum"/>。</param>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Models.SavedEventArgs`2.#ctor(`0,ShSoft.Library.Infrastr.Enums.SaveActionEnum)">
            <summary>
            初始化 SavedEventArgs 的一个新实例。
            </summary>
            <param name="pEntityObject">保存操作返回的结果对象。</param>
            <param name="pSaveAction">保存活动类型 <seealso cref="T:ShSoft.Library.Infrastr.Enums.SaveActionEnum"/>。</param>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Models.SavedEventArgs`2.EntityObject">
            <summary>
            获取或设置当保存发生时的实体对象。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Models.SavedEventArgs`2.SaveAction">
            <summary>
            获取或设置当保存发生时的活动。
            </summary>
        </member>
        <member name="T:ShSoft.Library.Infrastr.ResultCollection`1">
            <summary>
            结果集合类型。
            </summary>
            <typeparam name="T">数据项类型。</typeparam>
        </member>
        <member name="T:ShSoft.Library.Infrastr.ResultData">
            <summary>
            结果数据结构化抽象对象，用于统一结果数据结构。
            </summary>
        </member>
        <member name="M:ShSoft.Library.Infrastr.ResultData.getInnerException(System.Exception)">
            <summary>
            获取内部异常。
            </summary>
            <param name="pException"></param>
            <returns></returns>
        </member>
        <member name="P:ShSoft.Library.Infrastr.ResultData.State">
            <summary>
            获取结果数据状态。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.ResultData.Message">
            <summary>
            获取执行结果描述信息。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.ResultData.Exception">
            <summary>
            获取执行过程中遇到的异常。
            </summary>
        </member>
        <member name="M:ShSoft.Library.Infrastr.ResultCollection`1.#ctor(System.Collections.Generic.List{`0},ShSoft.Library.Infrastr.CompositeStateEnum,System.String)">
            <summary>
            构造器。
            </summary>
            <param name="pData">结果数据列表。</param>
            <param name="pState">结果数据状态（获取数据过程的执行结果）。</param>
            <param name="pMessage">结果信息。</param>
        </member>
        <member name="M:ShSoft.Library.Infrastr.ResultCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0},ShSoft.Library.Infrastr.CompositeStateEnum,System.String)">
            <summary>
            构造器。
            </summary>
            <param name="pCollection">结果数据集合。</param>
            <param name="pState">结果数据状态（获取数据过程的执行结果）。</param>
            <param name="pMessage">结果信息。</param>
        </member>
        <member name="M:ShSoft.Library.Infrastr.ResultCollection`1.#ctor(System.Collections.Generic.List{`0},ShSoft.Library.Infrastr.ResultData)">
            <summary>
            构造器。
            </summary>
            <param name="pData">结果数据列表。</param>
            <param name="pResultData">结果返回对象。</param>
        </member>
        <member name="M:ShSoft.Library.Infrastr.ResultCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0},ShSoft.Library.Infrastr.ResultData)">
            <summary>
            构造器。
            </summary>
            <param name="pCollection">结果数据集合。</param>
            <param name="pResultData">结果返回对象。</param>
        </member>
        <member name="M:ShSoft.Library.Infrastr.ResultCollection`1.#ctor(ShSoft.Library.Infrastr.CompositeStateEnum,System.Exception,System.String,System.String)">
            <summary>
            构造器。
            </summary>
            <param name="pState">结果数据状态（获取数据过程的执行结果）。</param>
            <param name="pException">执行过程中遇到的异常（获取数据过程捕获到的异常）。</param>
            <param name="pCode">结果数据代码（获取数据过程的结果代码）。</param>
            <param name="pMessage">结果信息。</param>
        </member>
        <member name="M:ShSoft.Library.Infrastr.ResultCollection`1.#ctor(System.Exception,System.String,System.String)">
            <summary>
            构造器。
            </summary>
            <param name="pException">执行过程中遇到的异常（获取数据过程捕获到的异常）。</param>
            <param name="pCode">结果数据代码（获取数据过程的结果代码）。</param>
            <param name="pMessage">结果信息。</param>
        </member>
        <member name="M:ShSoft.Library.Infrastr.ResultCollection`1.#ctor(System.Collections.Generic.List{`0},ShSoft.Library.Infrastr.CompositeStateEnum,System.Exception,System.String,System.String)">
            <summary>
            构造器。
            </summary>
            <param name="pData">结果数据列表。</param>
            <param name="pState">结果数据状态（获取数据过程的执行结果）。</param>
            <param name="pException">执行过程中遇到的异常（获取数据过程捕获到的异常）。</param>
            <param name="pCode">结果数据代码（获取数据过程的结果代码）。</param>
            <param name="pMessage">结果信息。</param>
        </member>
        <member name="M:ShSoft.Library.Infrastr.ResultCollection`1.Add(`0)">
            <summary>
            将对象添加到 System.Collections.Generic.List&lt;T&gt; 的结尾处。
            </summary>
            <param name="pItem">要添加到 System.Collections.Generic.List&lt;T&gt; 的末尾处的对象。 对于引用类型，该值可以为 null。</param>
        </member>
        <member name="M:ShSoft.Library.Infrastr.ResultCollection`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            将指定集合的元素添加到 System.Collections.Generic.List&lt;T&gt; 的末尾。
            </summary>
            <param name="pCollection">一个集合，其元素应被添加到 System.Collections.Generic.List&lt;T&gt; 的末尾。 集合自身不能为 null，但它可以包含为 null 的元素（如果类型 T 为引用类型）。</param>
            <exception cref="T:System.ArgumentNullException">pCollection 为 null。</exception>
        </member>
        <member name="M:ShSoft.Library.Infrastr.ResultCollection`1.AsReadOnly">
            <summary>
            返回当前集合的只读 System.Collections.Generic.IList&lt;T&gt; 包装。
            </summary>
            <returns>作为当前 System.Collections.Generic.List&lt;T&gt; 周围的只读包装的 System.Collections.ObjectModel.ReadOnlyCollection&lt;T&gt;。</returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.ResultCollection`1.BinarySearch(`0)">
            <summary>
            使用默认的比较器在整个已排序的 System.Collections.Generic.List&lt;T&gt; 中搜索元素，并返回该元素从零开始的索引。
            </summary>
            <param name="pItem">要定位的对象。 对于引用类型，该值可以为 null。</param>
            <returns>如果找到 pItem，则为已排序的 System.Collections.Generic.List&lt;T&gt; 中 item 的从零开始的索引；否则为一个负数，该负数是大于 pItem 的第一个元素的索引的按位求补。如果没有更大的元素，则为 System.Collections.Generic.List&lt;T&gt;.Count 的按位求补。</returns>
            <exception cref="T:System.InvalidOperationException">默认比较器 System.Collections.Generic.Comparer&lt;T&gt;.Default 找不到 T 类型的 System.IComparable&lt;T&gt; 泛型接口或 System.IComparable 接口的实现。</exception>
        </member>
        <member name="M:ShSoft.Library.Infrastr.ResultCollection`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
            <summary>
            使用指定的比较器在整个已排序的 System.Collections.Generic.List&lt;T&gt; 中搜索元素，并返回该元素从零开始的索引。
            </summary>
            <param name="pItem">要定位的对象。对于引用类型，该值可以为 null。</param>
            <param name="pComparer">比较元素时要使用的 System.Collections.Generic.IComparer&lt;T&gt; 实现。 - 或 - 为 null 以使用默认比较器 System.Collections.Generic.Comparer&lt;T&gt;.Default。</param>
            <returns>如果找到 pItem，则为已排序的 System.Collections.Generic.List&lt;T&gt; 中 pItem 的从零开始的索引；否则为一个负数，该负数是大于 pItem 的第一个元素的索引的按位求补。如果没有更大的元素，则为 System.Collections.Generic.List&lt;T&gt;.Count 的按位求补。</returns>
            <exception cref="T:System.InvalidOperationException">pComparer 为 null，且默认比较器 System.Collections.Generic.Comparer&lt;T&gt;.Default 找不到 T 类型的 System.IComparable&lt;T&gt; 泛型接口或 System.IComparable 接口的实现。</exception>
        </member>
        <member name="M:ShSoft.Library.Infrastr.ResultCollection`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
            <summary>
            使用指定的比较器在已排序 System.Collections.Generic.List&lt;T&gt; 的某个元素范围中搜索元素，并返回该元素从零开始的索引。
            </summary>
            <param name="pIndex">要搜索的范围从零开始的起始索引。</param>
            <param name="pCount">要搜索的范围的长度。</param>
            <param name="pItem">要定位的对象。对于引用类型，该值可以为 null。</param>
            <param name="pComparer">比较元素时要使用的 System.Collections.Generic.IComparer&lt;T&gt; 实现，或者为 null，表示使用默认比较器 System.Collections.Generic.Comparer&lt;T&gt;.Default。</param>
            <returns>如果找到 pItem，则为已排序的 System.Collections.Generic.List&lt;T&gt; 中 pItem 的从零开始的索引；否则为一个负数，该负数是大于 pItem 的第一个元素的索引的按位求补。如果没有更大的元素，则为 System.Collections.Generic.List&lt;T&gt;.Count 的按位求补。</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">pIndex 小于 0。 - 或 - pCount 小于 0。</exception>
            <exception cref="T:System.ArgumentException">pIndex 和 pCount 不表示 System.Collections.Generic.List&lt;T&gt; 中的有效范围。</exception>
            <exception cref="T:System.InvalidOperationException">pComparer 为 null，且默认比较器 System.Collections.Generic.Comparer&lt;T&gt;.Default 找不到 T 类型的 System.IComparable&lt;T&gt; 泛型接口或 System.IComparable 接口的实现。</exception>
        </member>
        <member name="M:ShSoft.Library.Infrastr.ResultCollection`1.Clear">
            <summary>
            从 System.Collections.Generic.List&lt;T&gt; 中移除所有元素。
            </summary>
        </member>
        <member name="M:ShSoft.Library.Infrastr.ResultCollection`1.Contains(`0)">
            <summary>
            确定某元素是否在 System.Collections.Generic.List&lt;T&gt; 中。
            </summary>
            <param name="pItem">要在 System.Collections.Generic.List&lt;T&gt; 中定位的对象。 对于引用类型，该值可以为 null。</param>
            <returns>如果在 System.Collections.Generic.List&lt;T&gt; 中找到 item，则为 true，否则为 false。</returns>
        </member>
        <!-- 对于成员“M:ShSoft.Library.Infrastr.ResultCollection`1.ConvertAll``1(System.Converter{`0,``0})”忽略有格式错误的 XML 注释 -->
        <member name="M:ShSoft.Library.Infrastr.ResultCollection`1.CopyTo(`0[])">
            <summary>
            将整个 System.Collections.Generic.List&lt;T&gt; 复制到兼容的一维数组中，从目标数组的开头开始放置。
            </summary>
            <param name="pArray">作为从 System.Collections.Generic.List&lt;T&gt; 复制的元素的目标位置的一维 System.Array。 System.Array 必须具有从零开始的索引。</param>
            <exception cref="T:System.ArgumentNullException">pArray 为 null。</exception>
            <exception cref="T:System.ArgumentException">源 System.Collections.Generic.List&lt;T&gt; 中的元素数大于目标 pArray 可包含的元素数。</exception>
        </member>
        <member name="M:ShSoft.Library.Infrastr.ResultCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            将整个 System.Collections.Generic.List&lt;T&gt; 复制到兼容的一维数组中，从目标数组的指定索引位置开始放置。
            </summary>
            <param name="pArray">作为从 System.Collections.Generic.List&lt;T&gt; 复制的元素的目标位置的一维 System.Array。 System.Array 必须具有从零开始的索引。</param>
            <param name="pArrayIndex">pArray 中从零开始的索引，从此索引处开始进行复制。</param>
            <exception cref="T:System.ArgumentNullException">pArray 为 null。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">pArrayIndex 小于 0。</exception>
            <exception cref="T:System.ArgumentException">源 System.Collections.Generic.List&lt;T&gt; 中的元素数目大于从 pArrayIndex 到目标 pArray 末尾之间的可用空间。</exception>
        </member>
        <member name="M:ShSoft.Library.Infrastr.ResultCollection`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
            <summary>
            将一定范围的元素从 System.Collections.Generic.List&lt;T&gt; 复制到兼容的一维数组中，从目标数组的指定索引位置开始放置。
            </summary>
            <param name="pIndex">源 System.Collections.Generic.List&lt;T&gt; 中复制开始位置的从零开始的索引。</param>
            <param name="pArray">作为从 System.Collections.Generic.List&lt;T&gt; 复制的元素的目标位置的一维 System.Array。 System.Array 必须具有从零开始的索引。</param>
            <param name="pArrayIndex">pArray 中从零开始的索引，从此索引处开始进行复制。</param>
            <param name="pCount">要复制的元素数。</param>
            <exception cref="T:System.ArgumentNullException">pArray 为 null。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">pIndex 小于 0。 - 或 - pArrayIndex 小于 0。 - 或 - pCount 小于 0。</exception>
            <exception cref="T:System.ArgumentException">pIndex 等于或大于源 System.Collections.Generic.List&lt;T&gt; 的 System.Collections.Generic.List&lt;T&gt;.Count。 - 或 - 从 pIndex 到源 System.Collections.Generic.List&lt;T&gt; 的末尾的元素数大于从 pArrayIndex 到目标 pArray 的末尾的可用空间。</exception>
        </member>
        <member name="M:ShSoft.Library.Infrastr.ResultCollection`1.Exists(System.Predicate{`0})">
            <summary>
            确定 System.Collections.Generic.List&lt;T&gt; 是否包含与指定谓词所定义的条件相匹配的元素。
            </summary>
            <param name="pMatch">System.Predicate&lt;T&gt; 委托，用于定义要搜索的元素应满足的条件。</param>
            <returns>如果 System.Collections.Generic.List&lt;T&gt; 包含一个或多个与指定谓词所定义的条件相匹配的元素，则为 true；否则为 false。</returns>
            <exception cref="T:System.ArgumentNullException">pMatch 为 null。</exception>
        </member>
        <member name="M:ShSoft.Library.Infrastr.ResultCollection`1.Find(System.Predicate{`0})">
            <summary>
            搜索与指定谓词所定义的条件相匹配的元素，并返回整个 System.Collections.Generic.List&lt;T&gt; 中的第一个匹配元素。
            </summary>
            <param name="pMatch">System.Predicate&lt;T&gt; 委托，用于定义要搜索的元素的条件。</param>
            <returns>如果找到与指定谓词定义的条件匹配的第一个元素，则为该元素；否则为类型 T 的默认值。</returns>
            <exception cref="T:System.ArgumentNullException">pMatch 为 null。</exception>
        </member>
        <member name="M:ShSoft.Library.Infrastr.ResultCollection`1.FindAll(System.Predicate{`0})">
            <summary>
            检索与指定谓词定义的条件匹配的所有元素。
            </summary>
            <param name="pMatch">System.Predicate&lt;T&gt; 委托，用于定义要搜索的元素应满足的条件。</param>
            <returns>如果找到，则为一个 System.Collections.Generic.List&lt;T&gt;，其中包含与指定谓词所定义的条件相匹配的所有元素；否则为一个空 System.Collections.Generic.List&lt;T&gt;。</returns>
            <exception cref="T:System.ArgumentNullException">pMatch 为 null。</exception>
        </member>
        <member name="M:ShSoft.Library.Infrastr.ResultCollection`1.FindIndex(System.Predicate{`0})">
            <summary>
            搜索与指定谓词所定义的条件相匹配的元素，并返回整个 System.Collections.Generic.List&lt;T&gt; 中第一个匹配元素的从零开始的索引。
            </summary>
            <param name="pMatch">System.Predicate&lt;T&gt; 委托，用于定义要搜索的元素的条件。</param>
            <returns>如果找到与 pMatch 定义的条件相匹配的第一个元素，则为该元素的从零开始的索引；否则为 -1。</returns>
            <exception cref="T:System.ArgumentNullException">pMatch 为 null。</exception>
        </member>
        <member name="M:ShSoft.Library.Infrastr.ResultCollection`1.FindIndex(System.Int32,System.Predicate{`0})">
            <summary>
            搜索与指定谓词所定义的条件相匹配的元素，并返回 System.Collections.Generic.List&lt;T&gt; 中从指定索引到最后一个元素的元素范围内第一个匹配项的从零开始的索引。
            </summary>
            <param name="pStartIndex">从零开始的搜索的起始索引。</param>
            <param name="pMatch">System.Predicate&lt;T&gt; 委托，用于定义要搜索的元素的条件。</param>
            <returns>如果找到与 pMatch 定义的条件相匹配的第一个元素，则为该元素的从零开始的索引；否则为 -1。</returns>
            <exception cref="T:System.ArgumentNullException">pMatch 为 null。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">pStartIndex 不在 System.Collections.Generic.List&lt;T&gt; 的有效索引范围内。</exception>
        </member>
        <member name="M:ShSoft.Library.Infrastr.ResultCollection`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
            <summary>
            搜索与指定谓词所定义的条件相匹配的一个元素，并返回 System.Collections.Generic.List&lt;T&gt; 中从指定的索引开始、包含指定元素个数的元素范围内第一个匹配项的从零开始的索引。
            </summary>
            <param name="pStartIndex">从零开始的搜索的起始索引。</param>
            <param name="pCount">要搜索的部分中的元素数。</param>
            <param name="pMatch">System.Predicate&lt;T&gt; 委托，用于定义要搜索的元素的条件。</param>
            <returns>如果找到与 pMatch 定义的条件相匹配的第一个元素，则为该元素的从零开始的索引；否则为 -1。</returns>
            <exception cref="T:System.ArgumentNullException">pMatch 为 null。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">pStartIndex 不在 System.Collections.Generic.List&lt;T&gt; 的有效索引范围内。 - 或 - pCount 小于 0。 - 或 - pStartIndex 和 pCount 未指定 System.Collections.Generic.List&lt;T&gt; 中的有效部分。</exception>
        </member>
        <member name="M:ShSoft.Library.Infrastr.ResultCollection`1.FindLast(System.Predicate{`0})">
            <summary>
            搜索与指定谓词所定义的条件相匹配的元素，并返回整个 System.Collections.Generic.List&lt;T&gt; 中的最后一个匹配元素。
            </summary>
            <param name="pMatch">System.Predicate&lt;T&gt; 委托，用于定义要搜索的元素的条件。</param>
            <returns>如果找到，则为与指定谓词所定义的条件相匹配的最后一个元素；否则为类型 T 的默认值。</returns>
            <exception cref="T:System.ArgumentNullException">pMatch 为 null。</exception>
        </member>
        <member name="M:ShSoft.Library.Infrastr.ResultCollection`1.FindLastIndex(System.Predicate{`0})">
            <summary>
            搜索与指定谓词所定义的条件相匹配的元素，并返回整个 System.Collections.Generic.List&lt;T&gt; 中最后一个匹配元素的从零开始的索引。
            </summary>
            <param name="pMatch">System.Predicate&lt;T&gt; 委托，用于定义要搜索的元素的条件。</param>
            <returns>如果找到与 pMatch 定义的条件相匹配的最后一个元素，则为该元素的从零开始的索引；否则为 -1。</returns>
            <exception cref="T:System.ArgumentNullException">pMatch 为 null。</exception>
        </member>
        <member name="M:ShSoft.Library.Infrastr.ResultCollection`1.FindLastIndex(System.Int32,System.Predicate{`0})">
            <summary>
            搜索与由指定谓词定义的条件相匹配的元素，并返回 System.Collections.Generic.List&lt;T&gt; 中从第一个元素到指定索引的元素范围内最后一个匹配项的从零开始的索引。
            </summary>
            <param name="pStartIndex">向后搜索的从零开始的起始索引。</param>
            <param name="pMatch">System.Predicate&lt;T&gt; 委托，用于定义要搜索的元素的条件。</param>
            <returns>如果找到与 pMatch 定义的条件相匹配的最后一个元素，则为该元素的从零开始的索引；否则为 -1。</returns>
            <exception cref="T:System.ArgumentNullException">pMatch 为 null。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">pStartIndex 不在 System.Collections.Generic.List&lt;T&gt; 的有效索引范围内。</exception>
        </member>
        <member name="M:ShSoft.Library.Infrastr.ResultCollection`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
            <summary>
            搜索与指定谓词所定义的条件相匹配的元素，并返回 System.Collections.Generic.List&lt;T&gt; 中包含指定元素个数、到指定索引结束的元素范围内最后一个匹配项的从零开始的索引。
            </summary>
            <param name="pStartIndex">向后搜索的从零开始的起始索引。</param>
            <param name="pCount">要搜索的部分中的元素数。</param>
            <param name="pMatch">System.Predicate&lt;T&gt; 委托，用于定义要搜索的元素的条件。</param>
            <returns>如果找到与 pMatch 定义的条件相匹配的最后一个元素，则为该元素的从零开始的索引；否则为 -1。</returns>
            <exception cref="T:System.ArgumentNullException">pMatch 为 null。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">pStartIndex 不在 System.Collections.Generic.List&lt;T&gt; 的有效索引范围内。 - 或 - pCount 小于 0。 - 或 - pStartIndex 和 pCount 未指定 System.Collections.Generic.List&lt;T&gt; 中的有效部分。</exception>
        </member>
        <member name="M:ShSoft.Library.Infrastr.ResultCollection`1.ForEach(System.Action{`0})">
            <summary>
            对 System.Collections.Generic.List&lt;T&gt; 的每个元素执行指定操作。
            </summary>
            <param name="pAction">要对 System.Collections.Generic.List&lt;T&gt; 的每个元素执行的 System.Action&lt;T&gt; 委托。</param>
            <exception cref="T:System.ArgumentNullException">pAction 为 null。</exception>
        </member>
        <member name="M:ShSoft.Library.Infrastr.ResultCollection`1.GetEnumerator">
            <summary>
            返回循环访问 System.Collections.Generic.List&lt;T&gt; 的枚举数。
            </summary>
            <returns>用于 System.Collections.Generic.List&lt;T&gt; 的 System.Collections.Generic.List&lt;T&gt;.Enumerator。</returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.ResultCollection`1.GetRange(System.Int32,System.Int32)">
            <summary>
            创建源 System.Collections.Generic.List&lt;T&gt; 中的元素范围的浅表副本。
            </summary>
            <param name="pIndex">范围开始处的从零开始的 System.Collections.Generic.List&lt;T&gt; 索引。</param>
            <param name="pCount">范围中的元素数。</param>
            <returns>源 System.Collections.Generic.List&lt;T&gt; 中的元素范围的浅表副本。</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">pIndex 小于 0。 - 或 - pCount 小于 0。</exception>
            <exception cref="T:System.ArgumentException">pIndex 和 pCount 不表示 System.Collections.Generic.List&lt;T&gt; 中元素的有效范围。</exception>
        </member>
        <member name="M:ShSoft.Library.Infrastr.ResultCollection`1.IndexOf(`0)">
            <summary>
            搜索指定的对象，并返回整个 System.Collections.Generic.List&lt;T&gt; 中第一个匹配项的从零开始的索引。
            </summary>
            <param name="pItem">要在 System.Collections.Generic.List&lt;T&gt; 中定位的对象。 对于引用类型，该值可以为 null。</param>
            <returns>如果在整个 System.Collections.Generic.List&lt;T&gt; 中找到 pItem 的第一个匹配项，则为该项的从零开始的索引；否则为 -1。</returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.ResultCollection`1.IndexOf(`0,System.Int32)">
            <summary>
            搜索指定的对象，并返回 System.Collections.Generic.List&lt;T&gt; 中从指定索引到最后一个元素的元素范围内第一个匹配项的从零开始的索引。
            </summary>
            <param name="pItem">要在 System.Collections.Generic.List&lt;T&gt; 中定位的对象。 对于引用类型，该值可以为 null。</param>
            <param name="pIndex">从零开始的搜索的起始索引。 空列表中 0（零）为有效值。</param>
            <returns>如果在 System.Collections.Generic.List&lt;T&gt; 中从 pIndex 到最后一个元素的元素范围内找到 pItem 的第一个匹配项，则为该项的从零开始的索引；否则为 -1。</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">pIndex 不在 System.Collections.Generic.List&lt;T&gt; 的有效索引范围内。</exception>
        </member>
        <member name="M:ShSoft.Library.Infrastr.ResultCollection`1.IndexOf(`0,System.Int32,System.Int32)">
            <summary>
            搜索指定的对象，并返回 System.Collections.Generic.List&lt;T&gt; 中从指定的索引开始并包含指定的元素数的元素范围内第一个匹配项的从零开始的索引。
            </summary>
            <param name="pItem">要在 System.Collections.Generic.List&lt;T&gt; 中定位的对象。对于引用类型，该值可以为 null。</param>
            <param name="pIndex">从零开始的搜索的起始索引。空列表中 0（零）为有效值。</param>
            <param name="pCount">要搜索的部分中的元素数。</param>
            <returns>如果在 System.Collections.Generic.List&lt;T&gt; 中从 pIndex 开始并包含 pCount 个元素的元素范围内找到 pItem 的第一个匹配项，则为该项的从零开始的索引；否则为 -1。</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">pIndex 不在 System.Collections.Generic.List&lt;T&gt; 的有效索引范围内。 - 或 - pCount 小于 0。 - 或 - pIndex 和 pCount 未指定 System.Collections.Generic.List&lt;T&gt; 中的有效部分。</exception>
        </member>
        <member name="M:ShSoft.Library.Infrastr.ResultCollection`1.Insert(System.Int32,`0)">
            <summary>
            将元素插入 System.Collections.Generic.List&lt;T&gt; 的指定索引处。
            </summary>
            <param name="pIndex">从零开始的索引，应在该位置插入 pItem。</param>
            <param name="pItem">要插入的对象。对于引用类型，该值可以为 null。</param>
            <exception cref="T:System.ArgumentOutOfRangeException">pIndex 小于 0。 - 或 - pIndex 大于 System.Collections.Generic.List&lt;T&gt;.Count。</exception>
        </member>
        <member name="M:ShSoft.Library.Infrastr.ResultCollection`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            将集合中的某个元素插入 System.Collections.Generic.List&lt;T&gt; 的指定索引处。
            </summary>
            <param name="pIndex">应在此处插入新元素的从零开始的索引。</param>
            <param name="pCollection">一个集合，应将其元素插入到 System.Collections.Generic.List&lt;T&gt; 中。 集合自身不能为 null，但它可以包含为 null 的元素（如果类型 T 为引用类型）。</param>
            <exception cref="T:System.ArgumentNullException">pCollection 为 null。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">pIndex 小于 0。 - 或 - pIndex 大于 System.Collections.Generic.List&lt;T&gt;.Count。</exception>
        </member>
        <member name="M:ShSoft.Library.Infrastr.ResultCollection`1.LastIndexOf(`0)">
            <summary>
            搜索指定的对象，并返回整个 System.Collections.Generic.List&lt;T&gt; 中最后一个匹配项的从零开始的索引。
            </summary>
            <param name="pItem">要在 System.Collections.Generic.List&lt;T&gt; 中定位的对象。 对于引用类型，该值可以为 null。</param>
            <returns>如果在整个 System.Collections.Generic.List&lt;T&gt; 中找到 pItem 的最后一个匹配项，则为该项的从零开始的索引；否则为 -1。</returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.ResultCollection`1.LastIndexOf(`0,System.Int32)">
            <summary>
            搜索指定的对象，并返回 System.Collections.Generic.List&lt;T&gt; 中从第一个元素到指定索引的元素范围内最后一个匹配项的从零开始的索引。
            </summary>
            <param name="pItem">要在 System.Collections.Generic.List&lt;T&gt; 中定位的对象。对于引用类型，该值可以为 null。</param>
            <param name="pIndex">向后搜索的从零开始的起始索引。</param>
            <returns>如果在 System.Collections.Generic.List&lt;T&gt; 中从第一个元素到 pIndex 的元素范围内找到 pItem 的最后一个匹配项，则为该项的从零开始的索引；否则为 -1。</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">pIndex 不在 System.Collections.Generic.List&lt;T&gt; 的有效索引范围内。</exception>
        </member>
        <member name="M:ShSoft.Library.Infrastr.ResultCollection`1.LastIndexOf(`0,System.Int32,System.Int32)">
            <summary>
            搜索指定的对象，并返回 System.Collections.Generic.List&lt;T&gt; 中包含指定的元素数并在指定索引处结束的元素范围内最后一个匹配项的从零开始的索引。
            </summary>
            <param name="pItem">要在 System.Collections.Generic.List&lt;T&gt; 中定位的对象。对于引用类型，该值可以为 null。</param>
            <param name="pIndex">向后搜索的从零开始的起始索引。</param>
            <param name="pCount">要搜索的部分中的元素数。</param>
            <returns>如果在 System.Collections.Generic.List&lt;T&gt; 中包含 pCount 个元素、在 pIndex 处结尾的元素范围内找到 pItem 的最后一个匹配项，则为该项的从零开始的索引；否则为 -1。</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">pIndex 不在 System.Collections.Generic.List&lt;T&gt; 的有效索引范围内。 - 或 - pCount 小于 0。 - 或 - pIndex 和 pCount 未指定 System.Collections.Generic.List&lt;T&gt; 中的有效部分。</exception>
        </member>
        <member name="M:ShSoft.Library.Infrastr.ResultCollection`1.Remove(`0)">
            <summary>
            从 System.Collections.Generic.List&lt;T&gt; 中移除特定对象的第一个匹配项。
            </summary>
            <param name="pItem">要从 System.Collections.Generic.List&lt;T&gt; 中移除的对象。 对于引用类型，该值可以为 null。</param>
            <returns>如果成功移除 pItem，则为 true；否则为 false。 如果在 System.Collections.Generic.List&lt;T&gt; 中没有找到 pItem，该方法也会返回 false。</returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.ResultCollection`1.RemoveAll(System.Predicate{`0})">
            <summary>
            移除与指定的谓词所定义的条件相匹配的所有元素。
            </summary>
            <param name="pMatch">System.Predicate&lt;T&gt; 委托，用于定义要移除的元素应满足的条件。</param>
            <returns>从 System.Collections.Generic.List&lt;T&gt; 中移除的元素的数目。</returns>
            <exception cref="T:System.ArgumentNullException">pMatch 为 null。</exception>
        </member>
        <member name="M:ShSoft.Library.Infrastr.ResultCollection`1.RemoveAt(System.Int32)">
            <summary>
            移除 System.Collections.Generic.List&lt;T&gt; 的指定索引处的元素。
            </summary>
            <param name="pIndex">要移除的元素的从零开始的索引。</param>
            <exception cref="T:System.ArgumentOutOfRangeException">pIndex 小于 0。 - 或 - pIndex 等于或大于 System.Collections.Generic.List&lt;T&gt;.Count。</exception>
        </member>
        <member name="M:ShSoft.Library.Infrastr.ResultCollection`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            从 System.Collections.Generic.List&lt;T&gt; 中移除一定范围的元素。
            </summary>
            <param name="pIndex">要移除的元素的范围从零开始的起始索引。</param>
            <param name="pCount">要移除的元素数。</param>
            <exception cref="T:System.ArgumentOutOfRangeException">pIndex 小于 0。 - 或 - pCount 小于 0。</exception>
            <exception cref="T:System.ArgumentException">pIndex 和 pCount 不表示 System.Collections.Generic.List&lt;T&gt; 中元素的有效范围。</exception>
        </member>
        <member name="M:ShSoft.Library.Infrastr.ResultCollection`1.Reverse">
            <summary>
            将整个 System.Collections.Generic.List&lt;T&gt; 中元素的顺序反转。
            </summary>
        </member>
        <member name="M:ShSoft.Library.Infrastr.ResultCollection`1.Reverse(System.Int32,System.Int32)">
            <summary>
            将指定范围中元素的顺序反转。
            </summary>
            <param name="pIndex">要反转的范围的从零开始的起始索引。</param>
            <param name="pCount">要反转的范围内的元素数。</param>
            <exception cref="T:System.ArgumentOutOfRangeException">pIndex 小于 0。 - 或 - pCount 小于 0。</exception>
            <exception cref="T:System.ArgumentException">pIndex 和 pCount 不表示 System.Collections.Generic.List&lt;T&gt; 中元素的有效范围。</exception>
        </member>
        <member name="M:ShSoft.Library.Infrastr.ResultCollection`1.Sort">
            <summary>
            使用默认比较器对整个 System.Collections.Generic.List&lt;T&gt; 中的元素进行排序。
            </summary>
        </member>
        <member name="M:ShSoft.Library.Infrastr.ResultCollection`1.Sort(System.Comparison{`0})">
            <summary>
            使用指定的 System.Comparison&lt;T&gt; 对整个 System.Collections.Generic.List&lt;T&gt; 中的元素进行排序。
            </summary>
            <param name="pComparison">比较元素时要使用的 System.Comparison&lt;T&gt;。</param>
        </member>
        <member name="M:ShSoft.Library.Infrastr.ResultCollection`1.Sort(System.Collections.Generic.IComparer{`0})">
            <summary>
            使用指定的比较器对整个 System.Collections.Generic.List&lt;T&gt; 中的元素进行排序。
            </summary>
            <param name="pComparer">比较元素时要使用的 System.Collections.Generic.IComparer&lt;T&gt; 实现，或者为 null，表示使用默认比较器 System.Collections.Generic.Comparer&lt;T&gt;.Default。</param>
        </member>
        <member name="M:ShSoft.Library.Infrastr.ResultCollection`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
            使用指定的比较器对 System.Collections.Generic.List&lt;T&gt; 中某个范围内的元素进行排序。
            </summary>
            <param name="pIndex">要排序的范围的从零开始的起始索引。</param>
            <param name="pCount">要排序的范围的长度。</param>
            <param name="pComparer">比较元素时要使用的 System.Collections.Generic.IComparer&lt;T&gt; 实现，或者为 null，表示使用默认比较器 System.Collections.Generic.Comparer&lt;T&gt;.Default。</param>
        </member>
        <member name="M:ShSoft.Library.Infrastr.ResultCollection`1.ToArray">
            <summary>
            将 System.Collections.Generic.List&lt;T&gt; 的元素复制到新数组中。
            </summary>
            <returns>一个数组，它包含 System.Collections.Generic.List&lt;T&gt; 的元素的副本。</returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.ResultCollection`1.TrimExcess">
            <summary>
            将容量设置为 System.Collections.Generic.List&lt;T&gt; 中的实际元素数目（如果该数目小于某个阈值）。
            </summary>
        </member>
        <member name="M:ShSoft.Library.Infrastr.ResultCollection`1.TrueForAll(System.Predicate{`0})">
            <summary>
            确定是否 System.Collections.Generic.List&lt;T&gt; 中的每个元素都与指定的谓词所定义的条件相匹配。
            </summary>
            <param name="pMatch">System.Predicate&lt;T&gt; 委托，定义要据以检查元素的条件。</param>
            <returns>如果 System.Collections.Generic.List&lt;T&gt; 中的每个元素都与指定的谓词所定义的条件相匹配，则为 true；否则为 false。 如果列表不包含任何元素，则返回值为 true。</returns>
            <exception cref="T:System.ArgumentNullException">pMatch 为 null。</exception>
        </member>
        <member name="P:ShSoft.Library.Infrastr.ResultCollection`1.Data">
            <summary>
            集合数据。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.ResultCollection`1.Capacity">
            <summary>
            获取或设置该内部数据结构在不调整大小的情况下能够容纳的元素总数。
            </summary>
            <value>在需要调整大小之前 System.Collections.Generic.List&lt;T&gt; 能够容纳的元素的数目。</value>
            <exception cref="T:System.ArgumentOutOfRangeException">System.Collections.Generic.List&lt;T&gt;.Capacity 设置为小于 System.Collections.Generic.List&lt;T&gt;.Count 的值。</exception>
            <exception cref="T:System.OutOfMemoryException">系统中没有足够的可用内存。</exception>
        </member>
        <member name="P:ShSoft.Library.Infrastr.ResultCollection`1.Count">
            <summary>
            获取 System.Collections.Generic.List&lt;T&gt; 中实际包含的元素数。
            </summary>
            <value>System.Collections.Generic.List&lt;T&gt; 中实际包含的元素数。</value>
        </member>
        <member name="P:ShSoft.Library.Infrastr.ResultCollection`1.Item(System.Int32)">
            <summary>
            获取或设置位于指定索引处的元素。
            </summary>
            <param name="pIndex">要获得或设置的元素从零开始的索引。</param>
            <returns>位于指定索引处的元素。</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">pIndex 小于 0。 - 或 - pIndex 等于或大于 System.Collections.Generic.List&lt;T&gt;.Count。</exception>
        </member>
        <member name="T:ShSoft.Library.Infrastr.ResultData`1">
            <summary>
            结果数据类型，用于统一返回值类型。
            </summary>
        </member>
        <member name="M:ShSoft.Library.Infrastr.ResultData`1.#ctor(`0,ShSoft.Library.Infrastr.CompositeStateEnum,System.String)">
            <summary>
            构造器。
            </summary>
            <param name="pData">结果数据。</param>
            <param name="pState">结果数据状态（获取数据过程的执行结果）。</param>
            <param name="pMessage">结果信息。</param>
        </member>
        <member name="M:ShSoft.Library.Infrastr.ResultData`1.#ctor(`0,ShSoft.Library.Infrastr.CompositeStateEnum,System.Exception,System.String,System.String)">
            <summary>
            构造器。
            </summary>
            <param name="pData">结果数据。</param>
            <param name="pState">结果数据状态（获取数据过程的执行结果）。</param>
            <param name="pException">执行过程中遇到的异常（获取数据过程捕获到的异常）。</param>
            <param name="pCode">结果数据代码（获取数据过程的结果代码）。</param>
            <param name="pMessage">结果信息。</param>
        </member>
        <member name="M:ShSoft.Library.Infrastr.ResultData`1.#ctor(`0,ShSoft.Library.Infrastr.ResultData)">
            <summary>
            构造器。
            </summary>
            <param name="pData">结果数据。</param>
            <param name="pResultData">结果返回对象。</param>
        </member>
        <member name="M:ShSoft.Library.Infrastr.ResultData`1.#ctor(`0,System.Exception,System.String,System.String)">
            <summary>
            构造器。
            </summary>
            <param name="pData">结果数据。</param>
            <param name="pException">执行过程中遇到的异常（获取数据过程捕获到的异常）。</param>
            <param name="pCode">结果数据代码（获取数据过程的结果代码）。</param>
            <param name="pMessage">结果信息。</param>
        </member>
        <member name="M:ShSoft.Library.Infrastr.ResultData`1.#ctor(System.Exception,System.String,System.String)">
            <summary>
            构造器。
            </summary>
            <param name="pException">执行过程中遇到的异常（获取数据过程捕获到的异常）。</param>
            <param name="pCode">结果数据代码（获取数据过程的结果代码）。</param>
            <param name="pMessage">结果信息。</param>
        </member>
        <member name="P:ShSoft.Library.Infrastr.ResultData`1.Data">
            <summary>
            获取结果数据对象。
            </summary>
        </member>
        <member name="T:ShSoft.Library.Infrastr.ResultPagedData`1">
            <summary>
            结果分页数据类型。
            </summary>
            <typeparam name="T">数据项类型。</typeparam>
        </member>
        <member name="F:ShSoft.Library.Infrastr.ResultPagedData`1.FirstPageIndex">
            <summary>
            首页索引。
            </summary>
        </member>
        <member name="M:ShSoft.Library.Infrastr.ResultPagedData`1.#ctor(System.Collections.Generic.List{`0},System.Int32,System.Int32,System.Int32,System.Int32,ShSoft.Library.Infrastr.CompositeStateEnum,System.String)">
            <summary>
            构造器。
            </summary>
            <param name="pCollection">结果分页数据列表。</param>
            <param name="pRecordCount">记录总数。</param>
            <param name="pPageIndex">当前页索引。</param>
            <param name="pPageSize">每页记录数。</param>
            <param name="pPageCount">总页数。</param>
            <param name="pState">结果数据状态（获取数据过程的执行结果）。</param>
            <param name="pMessage">结果信息。</param>
        </member>
        <member name="M:ShSoft.Library.Infrastr.ResultPagedData`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32,System.Int32,System.Int32,System.Int32,ShSoft.Library.Infrastr.CompositeStateEnum,System.String)">
            <summary>
            构造器。
            </summary>
            <param name="pCollection">结果分页数据集合。</param>
            <param name="pRecordCount">记录总数。</param>
            <param name="pPageIndex">当前页索引。</param>
            <param name="pPageSize">每页记录数。</param>
            <param name="pPageCount">总页数。</param>
            <param name="pState">结果数据状态（获取数据过程的执行结果）。</param>
            <param name="pMessage">结果信息。</param>
        </member>
        <member name="M:ShSoft.Library.Infrastr.ResultPagedData`1.#ctor(System.Collections.Generic.List{`0},ShSoft.Library.Infrastr.ResultData)">
            <summary>
            构造器。
            </summary>
            <param name="pData">结果数据。</param>
            <param name="pResultData">结果返回对象。</param>
        </member>
        <member name="M:ShSoft.Library.Infrastr.ResultPagedData`1.#ctor(System.Collections.Generic.IEnumerable{`0},ShSoft.Library.Infrastr.ResultData)">
            <summary>
            构造器。
            </summary>
            <param name="pCollection">结果数据。</param>
            <param name="pResultData">结果返回对象。</param>
        </member>
        <member name="M:ShSoft.Library.Infrastr.ResultPagedData`1.#ctor(ShSoft.Library.Infrastr.CompositeStateEnum,System.Exception,System.String,System.String)">
            <summary>
            构造器。
            </summary>
            <param name="pData">结果数据。</param>
            <param name="pState">结果数据状态（获取数据过程的执行结果）。</param>
            <param name="pException">执行过程中遇到的异常（获取数据过程捕获到的异常）。</param>
            <param name="pCode">结果数据代码（获取数据过程的结果代码）。</param>
            <param name="pMessage">结果信息。</param>
        </member>
        <member name="M:ShSoft.Library.Infrastr.ResultPagedData`1.#ctor(System.Exception,System.String,System.String)">
            <summary>
            构造器。
            </summary>
            <param name="pException">执行过程中遇到的异常（获取数据过程捕获到的异常）。</param>
            <param name="pCode">结果数据代码（获取数据过程的结果代码）。</param>
            <param name="pMessage">结果信息。</param>
        </member>
        <member name="P:ShSoft.Library.Infrastr.ResultPagedData`1.RecordCount">
            <summary>
            记录总数。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.ResultPagedData`1.PageIndex">
            <summary>
            当前页索引。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.ResultPagedData`1.PageSize">
            <summary>
            每页记录数。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.ResultPagedData`1.PageCount">
            <summary>
            总页数。
            </summary>
        </member>
        <member name="T:ShSoft.Library.Infrastr.Security.BaseDataSecurity">
            <summary>
            基础数据安全类。
            </summary>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Security.BaseDataSecurity.GetCiphertext(System.String,System.String,ShSoft.Library.Infrastr.Enums.EncryModeEnum)">
            <summary>
            获取密文。
            </summary>
            <param name="pPlaintext">明文。</param>
            <param name="pSecretKey">密钥。</param>
            <param name="pEncryMode">安全模式（加密方式）。</param>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Security.BaseDataSecurity.GetCiphertext(System.String,ShSoft.Library.Infrastr.Enums.EncryModeEnum)">
            <summary>
            获取密文。
            </summary>
            <param name="pPlaintext">明文。</param>
            <param name="pEncryMode">安全模式（加密方式）。</param>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Security.BaseDataSecurity.ValidatePlaintext(System.String,System.String)">
            <summary>
            验证明文与密文是否相同。
            </summary>
            <param name="pPlaintext">明文。</param>
            <param name="pCiphertext">密文。</param>
            <returns></returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Security.BaseDataSecurity.GetPlaintext(System.String,System.String)">
            <summary>
            获取原文。
            </summary>
            <param name="pCiphertext">密文。</param>
            <param name="pSecretKey">密钥。</param>
            <returns></returns>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Security.BaseDataSecurity.SecretKey">
            <summary>
            密钥。
            </summary>
        </member>
        <member name="T:ShSoft.Library.Infrastr.Security.FileHashComputer">
            <summary>
            文件哈希值计算器。
            </summary>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Security.FileHashComputer.ComputeMD5(System.String)">
            <summary>
            计算文件的 MD5 值。
            </summary>
            <param name="pFileName">要计算 MD5 值的文件名和路径。</param>
            <returns>MD5 值十六进制字符串。</returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Security.FileHashComputer.ComputeMD5(System.Byte[])">
            <summary>
            计算文件的 MD5 值。
            </summary>
            <param name="pFileBytes">要计算 MD5 值的文件字节数组。</param>
            <returns>MD5 值十六进制字符串。</returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Security.FileHashComputer.ComputeSHA1(System.String)">
            <summary>
            计算文件的 SHA1 值。
            </summary>
            <param name="pFileName">要计算 sha1 值的文件名和路径。</param>
            <returns>SHA1 值十六进制字符串。</returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Security.FileHashComputer.ComputeSHA1(System.Byte[])">
            <summary>
            计算文件的 SHA1 值。
            </summary>
            <param name="pFileBytes">要计算 sha1 值的文件字节数组。</param>
            <returns>SHA1 值十六进制字符串。</returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Security.FileHashComputer.computerHash(System.Byte[],ShSoft.Library.Infrastr.Enums.HashAlgorithmEnum)">
            <summary>
            计算文件的哈希值。
            </summary>
            <param name="pFileBytes">要计算哈希值的文件字节数组。</param>
            <param name="pHashAlgorithm">哈希算法。</param>
            <returns>哈希值十六进制字符串。</returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Security.FileHashComputer.computerHash(System.String,ShSoft.Library.Infrastr.Enums.HashAlgorithmEnum)">
            <summary>
            计算文件的哈希值。
            </summary>
            <param name="pFileName">要计算哈希值的文件名和路径。</param>
            <param name="pHashAlgorithm">哈希算法。</param>
            <returns>哈希值十六进制字符串。</returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Security.FileHashComputer.getHashAlgorithm(ShSoft.Library.Infrastr.Enums.HashAlgorithmEnum)">
            <summary>
            获取散列算法对象。
            </summary>
            <param name="pHashAlgorithm">哈希算法。</param>
            <returns></returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Security.FileHashComputer.getHashData(System.IO.Stream,ShSoft.Library.Infrastr.Enums.HashAlgorithmEnum)">
            <summary>
            计算哈希值。
            </summary>
            <param name="pStream">要计算哈希值的流。</param>
            <param name="pHashAlgorithm">哈希算法。</param>
            <returns>哈希值字节数组</returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Security.FileHashComputer.getHashData(System.Byte[],ShSoft.Library.Infrastr.Enums.HashAlgorithmEnum)">
            <summary>
            计算哈希值。
            </summary>
            <param name="pBytes">要计算哈希值的字节数组。</param>
            <param name="pHashAlgorithm">哈希算法。</param>
            <returns>哈希值字节数组</returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Security.FileHashComputer.byteArrayToHexString(System.Byte[])">
            <summary>
            字节数组转换为十六进制表示的字符串。
            </summary>
            <param name="pBytes">要转换为十六进制表示的字符串的字节数组。</param>
        </member>
        <member name="T:ShSoft.Library.Infrastr.Security.Interfaces.ITokenEntity">
            <summary>
            令牌实体接口。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Security.Interfaces.ITokenEntity.UserToken">
            <summary>
            用户令牌。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Security.Interfaces.ITokenEntity.UserAccount">
            <summary>
            用户账号。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Security.Interfaces.ITokenEntity.RoleList">
            <summary>
            角色列表。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Security.Interfaces.ITokenEntity.PurviewList">
            <summary>
            权限列表。
            </summary>
        </member>
        <member name="T:ShSoft.Library.Infrastr.Security.Interfaces.ITokenValidator">
            <summary>
            令牌验证器。
            </summary>
        </member>
        <member name="P:ShSoft.Library.Infrastr.Security.Interfaces.ITokenValidator.TokenEntity">
            <summary>
            令牌实体。
            </summary>
        </member>
        <member name="T:ShSoft.Library.Infrastr.Security.DesSecurity">
            <summary>
            MD5 安全类，可逆加密解密。
            </summary>
        </member>
        <member name="F:ShSoft.Library.Infrastr.Security.DesSecurity.initializationVector">
            <summary>
            安全的初始化向量常量。
            </summary>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Security.DesSecurity.Encrypt(System.String,System.String)">
            <summary>
            MD5 加密，并返回密文。
            </summary>
            <param name="pPlaintext">明文。</param>
            <param name="pSecretKey">密钥。</param>
            <returns></returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Security.DesSecurity.Decrypt(System.String,System.String)">
            <summary>
            MD5 解密，并返回明文。
            </summary>
            <param name="pCiphertext">密文。</param>
            <param name="pSecretKey">密钥。</param>
            <returns></returns>
        </member>
        <member name="T:ShSoft.Library.Infrastr.Security.Md5Security">
            <summary>
            MD5 安全类，不可逆加密。
            </summary>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Security.Md5Security.Encrypt(System.String)">
            <summary>
            MD5 加密，并返回密文。
            </summary>
            <param name="pPlaintext">明文。</param>
            <returns></returns>
        </member>
        <member name="M:ShSoft.Library.Infrastr.Security.Md5Security.Validate(System.String,System.String)">
            <summary>
            验证明文、密文是否对等。
            </summary>
            <param name="pPlaintext"></param>
            <param name="pCiphertext"></param>
            <returns></returns>
        </member>
    </members>
</doc>
