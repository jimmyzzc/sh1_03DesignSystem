<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SD.Toolkits.EntityFramework</name>
    </assembly>
    <members>
        <member name="T:SD.Toolkits.EntityFramework.Base.BaseDbContext">
            <summary>
            EF上下文基类
            </summary>
        </member>
        <member name="M:SD.Toolkits.EntityFramework.Base.BaseDbContext.#ctor(System.String)">
            <summary>
            基础构造器
            </summary>
            <param name="connectionName">连接字符串名称</param>
        </member>
        <member name="M:SD.Toolkits.EntityFramework.Base.BaseDbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <summary>
            模型创建事件
            </summary>
            <param name="modelBuilder">模型建造者</param>
        </member>
        <member name="M:SD.Toolkits.EntityFramework.Base.BaseDbContext.RegisterEntityConfigurations(System.Data.Entity.DbModelBuilder)">
            <summary>
            注册实体配置
            </summary>
            <param name="modelBuilder">模型建造者</param>
        </member>
        <member name="M:SD.Toolkits.EntityFramework.Base.BaseDbContext.RegisterEntityTypes(System.Data.Entity.DbModelBuilder,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            注册实体类型
            </summary>
            <param name="modelBuilder">模型建造者</param>
            <param name="entityTypes">实体类型集</param>
        </member>
        <member name="M:SD.Toolkits.EntityFramework.Base.BaseDbContext.RegisterTableMaps(System.Data.Entity.DbModelBuilder)">
            <summary>
            注册数据表名前缀
            </summary>
            <param name="modelBuilder">模型建造者</param>
        </member>
        <member name="P:SD.Toolkits.EntityFramework.Base.BaseDbContext.EntityAssembly">
            <summary>
            实体所在程序集
            </summary>
        </member>
        <member name="P:SD.Toolkits.EntityFramework.Base.BaseDbContext.EntityConfigAssembly">
            <summary>
            实体配置所在程序集
            </summary>
        </member>
        <member name="P:SD.Toolkits.EntityFramework.Base.BaseDbContext.TypeQuery">
            <summary>
            类型查询条件
            </summary>
        </member>
        <member name="P:SD.Toolkits.EntityFramework.Base.BaseDbContext.TypesToRegister">
            <summary>
            单独注册的类型集
            </summary>
        </member>
        <member name="P:SD.Toolkits.EntityFramework.Base.BaseDbContext.TablePrefix">
            <summary>
            数据表名前缀
            </summary>
        </member>
        <member name="T:SD.Toolkits.EntityFramework.Extensions.ConfigurationExtension">
            <summary>
            FluentAPI配置扩展
            </summary>
        </member>
        <member name="M:SD.Toolkits.EntityFramework.Extensions.ConfigurationExtension.HasIndex``1(System.Data.Entity.ModelConfiguration.EntityTypeConfiguration{``0},System.String,System.Func{System.Data.Entity.ModelConfiguration.EntityTypeConfiguration{``0},System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration},System.Func{System.Data.Entity.ModelConfiguration.EntityTypeConfiguration{``0},System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration}[])">
            <summary>
            FluentAPI配置非聚集索引扩展方法
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="entityTypeConfiguration">实体类型配置</param>
            <param name="indexName">索引名称</param>
            <param name="propertySelector">属性选择器</param>
            <param name="additionalPropertySelectors">属性选择器集</param>
            <returns>实体类型配置</returns>
        </member>
        <member name="M:SD.Toolkits.EntityFramework.Extensions.ConfigurationExtension.HasIndex``1(System.Data.Entity.ModelConfiguration.EntityTypeConfiguration{``0},System.String,SD.Toolkits.EntityFramework.Extensions.IndexType,System.Func{System.Data.Entity.ModelConfiguration.EntityTypeConfiguration{``0},System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration},System.Func{System.Data.Entity.ModelConfiguration.EntityTypeConfiguration{``0},System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration}[])">
            <summary>
            FluentAPI配置索引扩展方法
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="entityTypeConfiguration">实体类型配置</param>
            <param name="indexName">索引名称</param>
            <param name="indexType">索引类型</param>
            <param name="propertySelector">属性选择器</param>
            <param name="additionalPropertySelectors">属性选择器集</param>
            <returns>实体类型配置</returns>
        </member>
        <member name="T:SD.Toolkits.EntityFramework.Extensions.IndexType">
            <summary>
            索引类型
            </summary>
        </member>
        <member name="F:SD.Toolkits.EntityFramework.Extensions.IndexType.Nonclustered">
            <summary>
            非聚集索引
            </summary>
        </member>
        <member name="F:SD.Toolkits.EntityFramework.Extensions.IndexType.Clustered">
            <summary>
            聚集索引
            </summary>
        </member>
        <member name="F:SD.Toolkits.EntityFramework.Extensions.IndexType.Unique">
            <summary>
            唯一键
            </summary>
        </member>
        <member name="F:SD.Toolkits.EntityFramework.Extensions.IndexType.ClusteredUnique">
            <summary>
            聚集并唯一键
            </summary>
        </member>
        <member name="T:SD.Toolkits.EntityFramework.Extensions.PredicateBuilder`1">
            <summary>
            查询条件建造者
            </summary>
        </member>
        <member name="F:SD.Toolkits.EntityFramework.Extensions.PredicateBuilder`1._condition">
            <summary>
            表达式
            </summary>
        </member>
        <member name="M:SD.Toolkits.EntityFramework.Extensions.PredicateBuilder`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            基础构造器
            </summary>
            <param name="initialPredicate">初始条件表达式</param>
        </member>
        <member name="M:SD.Toolkits.EntityFramework.Extensions.PredicateBuilder`1.And(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            逻辑运算（并）
            </summary>
            <param name="predicate">条件表达式</param>
        </member>
        <member name="M:SD.Toolkits.EntityFramework.Extensions.PredicateBuilder`1.Or(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            逻辑运算（或）
            </summary>
            <param name="predicate">条件表达式</param>
        </member>
        <member name="M:SD.Toolkits.EntityFramework.Extensions.PredicateBuilder`1.Build">
            <summary>
            建造完毕
            </summary>
            <returns>查询条件</returns>
        </member>
        <member name="T:SD.Toolkits.EntityFramework.Extensions.ParameterExpressionVisitor">
            <summary>
            参数表达式访问者
            </summary>
        </member>
        <member name="F:SD.Toolkits.EntityFramework.Extensions.ParameterExpressionVisitor._parameterExpression">
            <summary>
            参数表达式
            </summary>
        </member>
        <member name="M:SD.Toolkits.EntityFramework.Extensions.ParameterExpressionVisitor.#ctor(System.Linq.Expressions.ParameterExpression)">
            <summary>
            构造器
            </summary>
            <param name="expression">参数表达式</param>
        </member>
        <member name="M:SD.Toolkits.EntityFramework.Extensions.ParameterExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
            访问
            </summary>
            <param name="expression">参数表达式</param>
            <returns>表达式</returns>
        </member>
        <member name="T:SD.Toolkits.EntityFramework.Extensions.QueryableExtension">
            <summary>
            IQueryable集合扩展
            </summary>
        </member>
        <member name="M:SD.Toolkits.EntityFramework.Extensions.QueryableExtension.ParseSql(System.Linq.IQueryable)">
            <summary>
            IQueryable集合转换为SQL语句
            </summary>
            <param name="queryable">IQueryable集合对象</param>
            <returns>SQL语句</returns>
        </member>
        <member name="M:SD.Toolkits.EntityFramework.Extensions.QueryableExtension.TryParseSQl(System.Linq.IQueryable,System.String@)">
            <summary>
            IQueryable集合转换为SQL语句
            </summary>
            <param name="queryable">IQueryable集合</param>
            <param name="sql">SQL语句</param>
            <returns>是否转换成功</returns>
        </member>
        <member name="M:SD.Toolkits.EntityFramework.Extensions.QueryableExtension.CanParseSQl(System.Linq.IQueryable)">
            <summary>
            判断IQueryable集合能否转换为SQL语句
            </summary>
            <param name="queryable">IQueryable集合</param>
            <returns>能否转换</returns>
        </member>
        <member name="M:SD.Toolkits.EntityFramework.Extensions.QueryableExtension.OrderBy``1(System.Linq.IQueryable{``0},System.Collections.Generic.IDictionary{System.String,System.Boolean})">
            <summary>
            IQueryable集合多列动态多条件排序
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="queryable">可查询集合</param>
            <param name="keySelectors">排序键</param>
            <returns>IQueryable集合</returns>
        </member>
    </members>
</doc>
